// Code generated by ent, DO NOT EDIT.

package userfollowinfo

import (
	"juice/public/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldUserID, v))
}

// FollowID applies equality check predicate on the "follow_id" field. It's identical to FollowIDEQ.
func FollowID(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldFollowID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldStatus, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLTE(FieldUserID, v))
}

// FollowIDEQ applies the EQ predicate on the "follow_id" field.
func FollowIDEQ(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldFollowID, v))
}

// FollowIDNEQ applies the NEQ predicate on the "follow_id" field.
func FollowIDNEQ(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNEQ(FieldFollowID, v))
}

// FollowIDIn applies the In predicate on the "follow_id" field.
func FollowIDIn(vs ...uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIn(FieldFollowID, vs...))
}

// FollowIDNotIn applies the NotIn predicate on the "follow_id" field.
func FollowIDNotIn(vs ...uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotIn(FieldFollowID, vs...))
}

// FollowIDGT applies the GT predicate on the "follow_id" field.
func FollowIDGT(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGT(FieldFollowID, v))
}

// FollowIDGTE applies the GTE predicate on the "follow_id" field.
func FollowIDGTE(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGTE(FieldFollowID, v))
}

// FollowIDLT applies the LT predicate on the "follow_id" field.
func FollowIDLT(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLT(FieldFollowID, v))
}

// FollowIDLTE applies the LTE predicate on the "follow_id" field.
func FollowIDLTE(v uint64) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLTE(FieldFollowID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int8) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLTE(FieldStatus, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.FieldNotNull(FieldUpdateTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserFollowInfo) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserFollowInfo) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserFollowInfo) predicate.UserFollowInfo {
	return predicate.UserFollowInfo(sql.NotPredicates(p))
}
