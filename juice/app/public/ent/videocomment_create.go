// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/public/ent/videocomment"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoCommentCreate is the builder for creating a VideoComment entity.
type VideoCommentCreate struct {
	config
	mutation *VideoCommentMutation
	hooks    []Hook
}

// SetCommentID sets the "comment_id" field.
func (vcc *VideoCommentCreate) SetCommentID(i int) *VideoCommentCreate {
	vcc.mutation.SetCommentID(i)
	return vcc
}

// SetPcommentID sets the "pcomment_id" field.
func (vcc *VideoCommentCreate) SetPcommentID(i int) *VideoCommentCreate {
	vcc.mutation.SetPcommentID(i)
	return vcc
}

// SetVideoID sets the "video_id" field.
func (vcc *VideoCommentCreate) SetVideoID(i int) *VideoCommentCreate {
	vcc.mutation.SetVideoID(i)
	return vcc
}

// SetUserID sets the "user_id" field.
func (vcc *VideoCommentCreate) SetUserID(i int) *VideoCommentCreate {
	vcc.mutation.SetUserID(i)
	return vcc
}

// SetCommentText sets the "comment_text" field.
func (vcc *VideoCommentCreate) SetCommentText(s string) *VideoCommentCreate {
	vcc.mutation.SetCommentText(s)
	return vcc
}

// SetNillableCommentText sets the "comment_text" field if the given value is not nil.
func (vcc *VideoCommentCreate) SetNillableCommentText(s *string) *VideoCommentCreate {
	if s != nil {
		vcc.SetCommentText(*s)
	}
	return vcc
}

// SetCreateTime sets the "create_time" field.
func (vcc *VideoCommentCreate) SetCreateTime(t time.Time) *VideoCommentCreate {
	vcc.mutation.SetCreateTime(t)
	return vcc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vcc *VideoCommentCreate) SetNillableCreateTime(t *time.Time) *VideoCommentCreate {
	if t != nil {
		vcc.SetCreateTime(*t)
	}
	return vcc
}

// SetUpdateTime sets the "update_time" field.
func (vcc *VideoCommentCreate) SetUpdateTime(t time.Time) *VideoCommentCreate {
	vcc.mutation.SetUpdateTime(t)
	return vcc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vcc *VideoCommentCreate) SetNillableUpdateTime(t *time.Time) *VideoCommentCreate {
	if t != nil {
		vcc.SetUpdateTime(*t)
	}
	return vcc
}

// SetID sets the "id" field.
func (vcc *VideoCommentCreate) SetID(u uint64) *VideoCommentCreate {
	vcc.mutation.SetID(u)
	return vcc
}

// Mutation returns the VideoCommentMutation object of the builder.
func (vcc *VideoCommentCreate) Mutation() *VideoCommentMutation {
	return vcc.mutation
}

// Save creates the VideoComment in the database.
func (vcc *VideoCommentCreate) Save(ctx context.Context) (*VideoComment, error) {
	return withHooks(ctx, vcc.sqlSave, vcc.mutation, vcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vcc *VideoCommentCreate) SaveX(ctx context.Context) *VideoComment {
	v, err := vcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcc *VideoCommentCreate) Exec(ctx context.Context) error {
	_, err := vcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcc *VideoCommentCreate) ExecX(ctx context.Context) {
	if err := vcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vcc *VideoCommentCreate) check() error {
	if _, ok := vcc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment_id", err: errors.New(`ent: missing required field "VideoComment.comment_id"`)}
	}
	if _, ok := vcc.mutation.PcommentID(); !ok {
		return &ValidationError{Name: "pcomment_id", err: errors.New(`ent: missing required field "VideoComment.pcomment_id"`)}
	}
	if _, ok := vcc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "VideoComment.video_id"`)}
	}
	if _, ok := vcc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "VideoComment.user_id"`)}
	}
	return nil
}

func (vcc *VideoCommentCreate) sqlSave(ctx context.Context) (*VideoComment, error) {
	if err := vcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	vcc.mutation.id = &_node.ID
	vcc.mutation.done = true
	return _node, nil
}

func (vcc *VideoCommentCreate) createSpec() (*VideoComment, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoComment{config: vcc.config}
		_spec = sqlgraph.NewCreateSpec(videocomment.Table, sqlgraph.NewFieldSpec(videocomment.FieldID, field.TypeUint64))
	)
	if id, ok := vcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vcc.mutation.CommentID(); ok {
		_spec.SetField(videocomment.FieldCommentID, field.TypeInt, value)
		_node.CommentID = value
	}
	if value, ok := vcc.mutation.PcommentID(); ok {
		_spec.SetField(videocomment.FieldPcommentID, field.TypeInt, value)
		_node.PcommentID = value
	}
	if value, ok := vcc.mutation.VideoID(); ok {
		_spec.SetField(videocomment.FieldVideoID, field.TypeInt, value)
		_node.VideoID = value
	}
	if value, ok := vcc.mutation.UserID(); ok {
		_spec.SetField(videocomment.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := vcc.mutation.CommentText(); ok {
		_spec.SetField(videocomment.FieldCommentText, field.TypeString, value)
		_node.CommentText = value
	}
	if value, ok := vcc.mutation.CreateTime(); ok {
		_spec.SetField(videocomment.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := vcc.mutation.UpdateTime(); ok {
		_spec.SetField(videocomment.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// VideoCommentCreateBulk is the builder for creating many VideoComment entities in bulk.
type VideoCommentCreateBulk struct {
	config
	err      error
	builders []*VideoCommentCreate
}

// Save creates the VideoComment entities in the database.
func (vccb *VideoCommentCreateBulk) Save(ctx context.Context) ([]*VideoComment, error) {
	if vccb.err != nil {
		return nil, vccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vccb.builders))
	nodes := make([]*VideoComment, len(vccb.builders))
	mutators := make([]Mutator, len(vccb.builders))
	for i := range vccb.builders {
		func(i int, root context.Context) {
			builder := vccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vccb *VideoCommentCreateBulk) SaveX(ctx context.Context) []*VideoComment {
	v, err := vccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vccb *VideoCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := vccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vccb *VideoCommentCreateBulk) ExecX(ctx context.Context) {
	if err := vccb.Exec(ctx); err != nil {
		panic(err)
	}
}
