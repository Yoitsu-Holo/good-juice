// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"juice/public/ent/videocollection"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VideoCollection is the model entity for the VideoCollection schema.
type VideoCollection struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID int `json:"video_id,omitempty"`
	// Status holds the value of the "status" field.
	Status int8 `json:"status,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VideoCollection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videocollection.FieldID, videocollection.FieldUserID, videocollection.FieldVideoID, videocollection.FieldStatus:
			values[i] = new(sql.NullInt64)
		case videocollection.FieldCreateTime, videocollection.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VideoCollection fields.
func (vc *VideoCollection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videocollection.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vc.ID = uint64(value.Int64)
		case videocollection.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vc.UserID = int(value.Int64)
			}
		case videocollection.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				vc.VideoID = int(value.Int64)
			}
		case videocollection.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				vc.Status = int8(value.Int64)
			}
		case videocollection.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				vc.CreateTime = value.Time
			}
		case videocollection.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				vc.UpdateTime = value.Time
			}
		default:
			vc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VideoCollection.
// This includes values selected through modifiers, order, etc.
func (vc *VideoCollection) Value(name string) (ent.Value, error) {
	return vc.selectValues.Get(name)
}

// Update returns a builder for updating this VideoCollection.
// Note that you need to call VideoCollection.Unwrap() before calling this method if this VideoCollection
// was returned from a transaction, and the transaction was committed or rolled back.
func (vc *VideoCollection) Update() *VideoCollectionUpdateOne {
	return NewVideoCollectionClient(vc.config).UpdateOne(vc)
}

// Unwrap unwraps the VideoCollection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vc *VideoCollection) Unwrap() *VideoCollection {
	_tx, ok := vc.config.driver.(*txDriver)
	if !ok {
		panic("ent: VideoCollection is not a transactional entity")
	}
	vc.config.driver = _tx.drv
	return vc
}

// String implements the fmt.Stringer.
func (vc *VideoCollection) String() string {
	var builder strings.Builder
	builder.WriteString("VideoCollection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vc.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", vc.UserID))
	builder.WriteString(", ")
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", vc.VideoID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", vc.Status))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(vc.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(vc.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VideoCollections is a parsable slice of VideoCollection.
type VideoCollections []*VideoCollection
