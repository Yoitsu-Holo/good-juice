// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"juice/app/public/ent/videometadatum"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// VideoMetadatum is the model entity for the VideoMetadatum schema.
type VideoMetadatum struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID int `json:"video_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// CoverURL holds the value of the "cover_url" field.
	CoverURL string `json:"cover_url,omitempty"`
	// VideoURL holds the value of the "video_url" field.
	VideoURL string `json:"video_url,omitempty"`
	// VideoIntro holds the value of the "video_intro" field.
	VideoIntro string `json:"video_intro,omitempty"`
	// VideoType holds the value of the "video_type" field.
	VideoType int `json:"video_type,omitempty"`
	// PublishAddress holds the value of the "publish_address" field.
	PublishAddress int32 `json:"publish_address,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VideoMetadatum) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case videometadatum.FieldID, videometadatum.FieldVideoID, videometadatum.FieldUserID, videometadatum.FieldVideoType, videometadatum.FieldPublishAddress:
			values[i] = new(sql.NullInt64)
		case videometadatum.FieldCoverURL, videometadatum.FieldVideoURL, videometadatum.FieldVideoIntro:
			values[i] = new(sql.NullString)
		case videometadatum.FieldCreateTime, videometadatum.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VideoMetadatum fields.
func (vm *VideoMetadatum) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case videometadatum.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vm.ID = uint64(value.Int64)
		case videometadatum.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				vm.VideoID = int(value.Int64)
			}
		case videometadatum.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vm.UserID = int(value.Int64)
			}
		case videometadatum.FieldCoverURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_url", values[i])
			} else if value.Valid {
				vm.CoverURL = value.String
			}
		case videometadatum.FieldVideoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_url", values[i])
			} else if value.Valid {
				vm.VideoURL = value.String
			}
		case videometadatum.FieldVideoIntro:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field video_intro", values[i])
			} else if value.Valid {
				vm.VideoIntro = value.String
			}
		case videometadatum.FieldVideoType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_type", values[i])
			} else if value.Valid {
				vm.VideoType = int(value.Int64)
			}
		case videometadatum.FieldPublishAddress:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field publish_address", values[i])
			} else if value.Valid {
				vm.PublishAddress = int32(value.Int64)
			}
		case videometadatum.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				vm.CreateTime = value.Time
			}
		case videometadatum.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				vm.UpdateTime = value.Time
			}
		default:
			vm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VideoMetadatum.
// This includes values selected through modifiers, order, etc.
func (vm *VideoMetadatum) Value(name string) (ent.Value, error) {
	return vm.selectValues.Get(name)
}

// Update returns a builder for updating this VideoMetadatum.
// Note that you need to call VideoMetadatum.Unwrap() before calling this method if this VideoMetadatum
// was returned from a transaction, and the transaction was committed or rolled back.
func (vm *VideoMetadatum) Update() *VideoMetadatumUpdateOne {
	return NewVideoMetadatumClient(vm.config).UpdateOne(vm)
}

// Unwrap unwraps the VideoMetadatum entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vm *VideoMetadatum) Unwrap() *VideoMetadatum {
	_tx, ok := vm.config.driver.(*txDriver)
	if !ok {
		panic("ent: VideoMetadatum is not a transactional entity")
	}
	vm.config.driver = _tx.drv
	return vm
}

// String implements the fmt.Stringer.
func (vm *VideoMetadatum) String() string {
	var builder strings.Builder
	builder.WriteString("VideoMetadatum(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vm.ID))
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", vm.VideoID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", vm.UserID))
	builder.WriteString(", ")
	builder.WriteString("cover_url=")
	builder.WriteString(vm.CoverURL)
	builder.WriteString(", ")
	builder.WriteString("video_url=")
	builder.WriteString(vm.VideoURL)
	builder.WriteString(", ")
	builder.WriteString("video_intro=")
	builder.WriteString(vm.VideoIntro)
	builder.WriteString(", ")
	builder.WriteString("video_type=")
	builder.WriteString(fmt.Sprintf("%v", vm.VideoType))
	builder.WriteString(", ")
	builder.WriteString("publish_address=")
	builder.WriteString(fmt.Sprintf("%v", vm.PublishAddress))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(vm.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(vm.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// VideoMetadata is a parsable slice of VideoMetadatum.
type VideoMetadata []*VideoMetadatum
