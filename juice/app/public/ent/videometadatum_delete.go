// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"juice/public/ent/predicate"
	"juice/public/ent/videometadatum"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoMetadatumDelete is the builder for deleting a VideoMetadatum entity.
type VideoMetadatumDelete struct {
	config
	hooks    []Hook
	mutation *VideoMetadatumMutation
}

// Where appends a list predicates to the VideoMetadatumDelete builder.
func (vmd *VideoMetadatumDelete) Where(ps ...predicate.VideoMetadatum) *VideoMetadatumDelete {
	vmd.mutation.Where(ps...)
	return vmd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vmd *VideoMetadatumDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vmd.sqlExec, vmd.mutation, vmd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vmd *VideoMetadatumDelete) ExecX(ctx context.Context) int {
	n, err := vmd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vmd *VideoMetadatumDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(videometadatum.Table, sqlgraph.NewFieldSpec(videometadatum.FieldID, field.TypeUint64))
	if ps := vmd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vmd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vmd.mutation.done = true
	return affected, err
}

// VideoMetadatumDeleteOne is the builder for deleting a single VideoMetadatum entity.
type VideoMetadatumDeleteOne struct {
	vmd *VideoMetadatumDelete
}

// Where appends a list predicates to the VideoMetadatumDelete builder.
func (vmdo *VideoMetadatumDeleteOne) Where(ps ...predicate.VideoMetadatum) *VideoMetadatumDeleteOne {
	vmdo.vmd.mutation.Where(ps...)
	return vmdo
}

// Exec executes the deletion query.
func (vmdo *VideoMetadatumDeleteOne) Exec(ctx context.Context) error {
	n, err := vmdo.vmd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{videometadatum.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vmdo *VideoMetadatumDeleteOne) ExecX(ctx context.Context) {
	if err := vmdo.Exec(ctx); err != nil {
		panic(err)
	}
}
