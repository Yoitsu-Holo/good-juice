// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/app/public/ent/userbaseinfo"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBaseInfoCreate is the builder for creating a UserBaseInfo entity.
type UserBaseInfoCreate struct {
	config
	mutation *UserBaseInfoMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ubic *UserBaseInfoCreate) SetUserID(u uint64) *UserBaseInfoCreate {
	ubic.mutation.SetUserID(u)
	return ubic
}

// SetUsername sets the "username" field.
func (ubic *UserBaseInfoCreate) SetUsername(s string) *UserBaseInfoCreate {
	ubic.mutation.SetUsername(s)
	return ubic
}

// SetSex sets the "sex" field.
func (ubic *UserBaseInfoCreate) SetSex(i int8) *UserBaseInfoCreate {
	ubic.mutation.SetSex(i)
	return ubic
}

// SetBirth sets the "birth" field.
func (ubic *UserBaseInfoCreate) SetBirth(t time.Time) *UserBaseInfoCreate {
	ubic.mutation.SetBirth(t)
	return ubic
}

// SetNillableBirth sets the "birth" field if the given value is not nil.
func (ubic *UserBaseInfoCreate) SetNillableBirth(t *time.Time) *UserBaseInfoCreate {
	if t != nil {
		ubic.SetBirth(*t)
	}
	return ubic
}

// SetArea sets the "area" field.
func (ubic *UserBaseInfoCreate) SetArea(i int32) *UserBaseInfoCreate {
	ubic.mutation.SetArea(i)
	return ubic
}

// SetUserProfile sets the "user_profile" field.
func (ubic *UserBaseInfoCreate) SetUserProfile(s string) *UserBaseInfoCreate {
	ubic.mutation.SetUserProfile(s)
	return ubic
}

// SetNillableUserProfile sets the "user_profile" field if the given value is not nil.
func (ubic *UserBaseInfoCreate) SetNillableUserProfile(s *string) *UserBaseInfoCreate {
	if s != nil {
		ubic.SetUserProfile(*s)
	}
	return ubic
}

// SetUserProfilePhotoURL sets the "user_profile_photo_url" field.
func (ubic *UserBaseInfoCreate) SetUserProfilePhotoURL(s string) *UserBaseInfoCreate {
	ubic.mutation.SetUserProfilePhotoURL(s)
	return ubic
}

// SetNillableUserProfilePhotoURL sets the "user_profile_photo_url" field if the given value is not nil.
func (ubic *UserBaseInfoCreate) SetNillableUserProfilePhotoURL(s *string) *UserBaseInfoCreate {
	if s != nil {
		ubic.SetUserProfilePhotoURL(*s)
	}
	return ubic
}

// SetFollowCount sets the "follow_count" field.
func (ubic *UserBaseInfoCreate) SetFollowCount(i int32) *UserBaseInfoCreate {
	ubic.mutation.SetFollowCount(i)
	return ubic
}

// SetFanCount sets the "fan_count" field.
func (ubic *UserBaseInfoCreate) SetFanCount(i int32) *UserBaseInfoCreate {
	ubic.mutation.SetFanCount(i)
	return ubic
}

// SetCreateTime sets the "create_time" field.
func (ubic *UserBaseInfoCreate) SetCreateTime(t time.Time) *UserBaseInfoCreate {
	ubic.mutation.SetCreateTime(t)
	return ubic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ubic *UserBaseInfoCreate) SetNillableCreateTime(t *time.Time) *UserBaseInfoCreate {
	if t != nil {
		ubic.SetCreateTime(*t)
	}
	return ubic
}

// SetUpdateTime sets the "update_time" field.
func (ubic *UserBaseInfoCreate) SetUpdateTime(t time.Time) *UserBaseInfoCreate {
	ubic.mutation.SetUpdateTime(t)
	return ubic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ubic *UserBaseInfoCreate) SetNillableUpdateTime(t *time.Time) *UserBaseInfoCreate {
	if t != nil {
		ubic.SetUpdateTime(*t)
	}
	return ubic
}

// SetID sets the "id" field.
func (ubic *UserBaseInfoCreate) SetID(u uint64) *UserBaseInfoCreate {
	ubic.mutation.SetID(u)
	return ubic
}

// Mutation returns the UserBaseInfoMutation object of the builder.
func (ubic *UserBaseInfoCreate) Mutation() *UserBaseInfoMutation {
	return ubic.mutation
}

// Save creates the UserBaseInfo in the database.
func (ubic *UserBaseInfoCreate) Save(ctx context.Context) (*UserBaseInfo, error) {
	return withHooks(ctx, ubic.sqlSave, ubic.mutation, ubic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ubic *UserBaseInfoCreate) SaveX(ctx context.Context) *UserBaseInfo {
	v, err := ubic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubic *UserBaseInfoCreate) Exec(ctx context.Context) error {
	_, err := ubic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubic *UserBaseInfoCreate) ExecX(ctx context.Context) {
	if err := ubic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubic *UserBaseInfoCreate) check() error {
	if _, ok := ubic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserBaseInfo.user_id"`)}
	}
	if _, ok := ubic.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "UserBaseInfo.username"`)}
	}
	if _, ok := ubic.mutation.Sex(); !ok {
		return &ValidationError{Name: "sex", err: errors.New(`ent: missing required field "UserBaseInfo.sex"`)}
	}
	if _, ok := ubic.mutation.Area(); !ok {
		return &ValidationError{Name: "area", err: errors.New(`ent: missing required field "UserBaseInfo.area"`)}
	}
	if _, ok := ubic.mutation.FollowCount(); !ok {
		return &ValidationError{Name: "follow_count", err: errors.New(`ent: missing required field "UserBaseInfo.follow_count"`)}
	}
	if _, ok := ubic.mutation.FanCount(); !ok {
		return &ValidationError{Name: "fan_count", err: errors.New(`ent: missing required field "UserBaseInfo.fan_count"`)}
	}
	return nil
}

func (ubic *UserBaseInfoCreate) sqlSave(ctx context.Context) (*UserBaseInfo, error) {
	if err := ubic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ubic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ubic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ubic.mutation.id = &_node.ID
	ubic.mutation.done = true
	return _node, nil
}

func (ubic *UserBaseInfoCreate) createSpec() (*UserBaseInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &UserBaseInfo{config: ubic.config}
		_spec = sqlgraph.NewCreateSpec(userbaseinfo.Table, sqlgraph.NewFieldSpec(userbaseinfo.FieldID, field.TypeUint64))
	)
	if id, ok := ubic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ubic.mutation.UserID(); ok {
		_spec.SetField(userbaseinfo.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := ubic.mutation.Username(); ok {
		_spec.SetField(userbaseinfo.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := ubic.mutation.Sex(); ok {
		_spec.SetField(userbaseinfo.FieldSex, field.TypeInt8, value)
		_node.Sex = value
	}
	if value, ok := ubic.mutation.Birth(); ok {
		_spec.SetField(userbaseinfo.FieldBirth, field.TypeTime, value)
		_node.Birth = value
	}
	if value, ok := ubic.mutation.Area(); ok {
		_spec.SetField(userbaseinfo.FieldArea, field.TypeInt32, value)
		_node.Area = value
	}
	if value, ok := ubic.mutation.UserProfile(); ok {
		_spec.SetField(userbaseinfo.FieldUserProfile, field.TypeString, value)
		_node.UserProfile = value
	}
	if value, ok := ubic.mutation.UserProfilePhotoURL(); ok {
		_spec.SetField(userbaseinfo.FieldUserProfilePhotoURL, field.TypeString, value)
		_node.UserProfilePhotoURL = value
	}
	if value, ok := ubic.mutation.FollowCount(); ok {
		_spec.SetField(userbaseinfo.FieldFollowCount, field.TypeInt32, value)
		_node.FollowCount = value
	}
	if value, ok := ubic.mutation.FanCount(); ok {
		_spec.SetField(userbaseinfo.FieldFanCount, field.TypeInt32, value)
		_node.FanCount = value
	}
	if value, ok := ubic.mutation.CreateTime(); ok {
		_spec.SetField(userbaseinfo.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := ubic.mutation.UpdateTime(); ok {
		_spec.SetField(userbaseinfo.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// UserBaseInfoCreateBulk is the builder for creating many UserBaseInfo entities in bulk.
type UserBaseInfoCreateBulk struct {
	config
	err      error
	builders []*UserBaseInfoCreate
}

// Save creates the UserBaseInfo entities in the database.
func (ubicb *UserBaseInfoCreateBulk) Save(ctx context.Context) ([]*UserBaseInfo, error) {
	if ubicb.err != nil {
		return nil, ubicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ubicb.builders))
	nodes := make([]*UserBaseInfo, len(ubicb.builders))
	mutators := make([]Mutator, len(ubicb.builders))
	for i := range ubicb.builders {
		func(i int, root context.Context) {
			builder := ubicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserBaseInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ubicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ubicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ubicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ubicb *UserBaseInfoCreateBulk) SaveX(ctx context.Context) []*UserBaseInfo {
	v, err := ubicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ubicb *UserBaseInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ubicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubicb *UserBaseInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ubicb.Exec(ctx); err != nil {
		panic(err)
	}
}
