// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/app/public/ent/videometadatum"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoMetadatumCreate is the builder for creating a VideoMetadatum entity.
type VideoMetadatumCreate struct {
	config
	mutation *VideoMetadatumMutation
	hooks    []Hook
}

// SetVideoID sets the "video_id" field.
func (vmc *VideoMetadatumCreate) SetVideoID(i int) *VideoMetadatumCreate {
	vmc.mutation.SetVideoID(i)
	return vmc
}

// SetUserID sets the "user_id" field.
func (vmc *VideoMetadatumCreate) SetUserID(i int) *VideoMetadatumCreate {
	vmc.mutation.SetUserID(i)
	return vmc
}

// SetCoverURL sets the "cover_url" field.
func (vmc *VideoMetadatumCreate) SetCoverURL(s string) *VideoMetadatumCreate {
	vmc.mutation.SetCoverURL(s)
	return vmc
}

// SetVideoURL sets the "video_url" field.
func (vmc *VideoMetadatumCreate) SetVideoURL(s string) *VideoMetadatumCreate {
	vmc.mutation.SetVideoURL(s)
	return vmc
}

// SetVideoIntro sets the "video_intro" field.
func (vmc *VideoMetadatumCreate) SetVideoIntro(s string) *VideoMetadatumCreate {
	vmc.mutation.SetVideoIntro(s)
	return vmc
}

// SetNillableVideoIntro sets the "video_intro" field if the given value is not nil.
func (vmc *VideoMetadatumCreate) SetNillableVideoIntro(s *string) *VideoMetadatumCreate {
	if s != nil {
		vmc.SetVideoIntro(*s)
	}
	return vmc
}

// SetVideoType sets the "video_type" field.
func (vmc *VideoMetadatumCreate) SetVideoType(i int) *VideoMetadatumCreate {
	vmc.mutation.SetVideoType(i)
	return vmc
}

// SetPublishAddress sets the "publish_address" field.
func (vmc *VideoMetadatumCreate) SetPublishAddress(i int32) *VideoMetadatumCreate {
	vmc.mutation.SetPublishAddress(i)
	return vmc
}

// SetCreateTime sets the "create_time" field.
func (vmc *VideoMetadatumCreate) SetCreateTime(t time.Time) *VideoMetadatumCreate {
	vmc.mutation.SetCreateTime(t)
	return vmc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vmc *VideoMetadatumCreate) SetNillableCreateTime(t *time.Time) *VideoMetadatumCreate {
	if t != nil {
		vmc.SetCreateTime(*t)
	}
	return vmc
}

// SetUpdateTime sets the "update_time" field.
func (vmc *VideoMetadatumCreate) SetUpdateTime(t time.Time) *VideoMetadatumCreate {
	vmc.mutation.SetUpdateTime(t)
	return vmc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vmc *VideoMetadatumCreate) SetNillableUpdateTime(t *time.Time) *VideoMetadatumCreate {
	if t != nil {
		vmc.SetUpdateTime(*t)
	}
	return vmc
}

// SetID sets the "id" field.
func (vmc *VideoMetadatumCreate) SetID(u uint64) *VideoMetadatumCreate {
	vmc.mutation.SetID(u)
	return vmc
}

// Mutation returns the VideoMetadatumMutation object of the builder.
func (vmc *VideoMetadatumCreate) Mutation() *VideoMetadatumMutation {
	return vmc.mutation
}

// Save creates the VideoMetadatum in the database.
func (vmc *VideoMetadatumCreate) Save(ctx context.Context) (*VideoMetadatum, error) {
	return withHooks(ctx, vmc.sqlSave, vmc.mutation, vmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vmc *VideoMetadatumCreate) SaveX(ctx context.Context) *VideoMetadatum {
	v, err := vmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmc *VideoMetadatumCreate) Exec(ctx context.Context) error {
	_, err := vmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmc *VideoMetadatumCreate) ExecX(ctx context.Context) {
	if err := vmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vmc *VideoMetadatumCreate) check() error {
	if _, ok := vmc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "VideoMetadatum.video_id"`)}
	}
	if _, ok := vmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "VideoMetadatum.user_id"`)}
	}
	if _, ok := vmc.mutation.CoverURL(); !ok {
		return &ValidationError{Name: "cover_url", err: errors.New(`ent: missing required field "VideoMetadatum.cover_url"`)}
	}
	if _, ok := vmc.mutation.VideoURL(); !ok {
		return &ValidationError{Name: "video_url", err: errors.New(`ent: missing required field "VideoMetadatum.video_url"`)}
	}
	if _, ok := vmc.mutation.VideoType(); !ok {
		return &ValidationError{Name: "video_type", err: errors.New(`ent: missing required field "VideoMetadatum.video_type"`)}
	}
	if _, ok := vmc.mutation.PublishAddress(); !ok {
		return &ValidationError{Name: "publish_address", err: errors.New(`ent: missing required field "VideoMetadatum.publish_address"`)}
	}
	return nil
}

func (vmc *VideoMetadatumCreate) sqlSave(ctx context.Context) (*VideoMetadatum, error) {
	if err := vmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	vmc.mutation.id = &_node.ID
	vmc.mutation.done = true
	return _node, nil
}

func (vmc *VideoMetadatumCreate) createSpec() (*VideoMetadatum, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoMetadatum{config: vmc.config}
		_spec = sqlgraph.NewCreateSpec(videometadatum.Table, sqlgraph.NewFieldSpec(videometadatum.FieldID, field.TypeUint64))
	)
	if id, ok := vmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vmc.mutation.VideoID(); ok {
		_spec.SetField(videometadatum.FieldVideoID, field.TypeInt, value)
		_node.VideoID = value
	}
	if value, ok := vmc.mutation.UserID(); ok {
		_spec.SetField(videometadatum.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := vmc.mutation.CoverURL(); ok {
		_spec.SetField(videometadatum.FieldCoverURL, field.TypeString, value)
		_node.CoverURL = value
	}
	if value, ok := vmc.mutation.VideoURL(); ok {
		_spec.SetField(videometadatum.FieldVideoURL, field.TypeString, value)
		_node.VideoURL = value
	}
	if value, ok := vmc.mutation.VideoIntro(); ok {
		_spec.SetField(videometadatum.FieldVideoIntro, field.TypeString, value)
		_node.VideoIntro = value
	}
	if value, ok := vmc.mutation.VideoType(); ok {
		_spec.SetField(videometadatum.FieldVideoType, field.TypeInt, value)
		_node.VideoType = value
	}
	if value, ok := vmc.mutation.PublishAddress(); ok {
		_spec.SetField(videometadatum.FieldPublishAddress, field.TypeInt32, value)
		_node.PublishAddress = value
	}
	if value, ok := vmc.mutation.CreateTime(); ok {
		_spec.SetField(videometadatum.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := vmc.mutation.UpdateTime(); ok {
		_spec.SetField(videometadatum.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// VideoMetadatumCreateBulk is the builder for creating many VideoMetadatum entities in bulk.
type VideoMetadatumCreateBulk struct {
	config
	err      error
	builders []*VideoMetadatumCreate
}

// Save creates the VideoMetadatum entities in the database.
func (vmcb *VideoMetadatumCreateBulk) Save(ctx context.Context) ([]*VideoMetadatum, error) {
	if vmcb.err != nil {
		return nil, vmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vmcb.builders))
	nodes := make([]*VideoMetadatum, len(vmcb.builders))
	mutators := make([]Mutator, len(vmcb.builders))
	for i := range vmcb.builders {
		func(i int, root context.Context) {
			builder := vmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoMetadatumMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vmcb *VideoMetadatumCreateBulk) SaveX(ctx context.Context) []*VideoMetadatum {
	v, err := vmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vmcb *VideoMetadatumCreateBulk) Exec(ctx context.Context) error {
	_, err := vmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmcb *VideoMetadatumCreateBulk) ExecX(ctx context.Context) {
	if err := vmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
