// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.4
// source: app/user/api/user/v1/user.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserBasicGetUserInfo = "/v1.UserBasic/GetUserInfo"
const OperationUserBasicSearchUserList = "/v1.UserBasic/SearchUserList"
const OperationUserBasicUpdateUserInfo = "/v1.UserBasic/UpdateUserInfo"
const OperationUserBasicUserLogin = "/v1.UserBasic/UserLogin"
const OperationUserBasicUserRegister = "/v1.UserBasic/UserRegister"

type UserBasicHTTPServer interface {
	// GetUserInfo 获取用户信息
	GetUserInfo(context.Context, *GetUserInfoRequest) (*UserInfoResponse, error)
	// SearchUserList 搜索用户
	SearchUserList(context.Context, *SeaechUserListRequest) (*UserListResponse, error)
	// UpdateUserInfo 用户信息更新接口
	UpdateUserInfo(context.Context, *UserUpdateInfoRequest) (*UserUpdateInfoResponse, error)
	// UserLogin 用户登陆
	UserLogin(context.Context, *UserLoginRequest) (*UserLoginResponse, error)
	// UserRegister 用户注册
	UserRegister(context.Context, *UserRegisterRequest) (*UserRegisterResponse, error)
}

func RegisterUserBasicHTTPServer(s *http.Server, srv UserBasicHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user_basic/login", _UserBasic_UserLogin0_HTTP_Handler(srv))
	r.POST("/v1/user_basic/register", _UserBasic_UserRegister0_HTTP_Handler(srv))
	r.POST("/v1/user_basic/update", _UserBasic_UpdateUserInfo0_HTTP_Handler(srv))
	r.GET("/v1/user_basic/info", _UserBasic_GetUserInfo0_HTTP_Handler(srv))
	r.GET("/v1/user_basic/search", _UserBasic_SearchUserList0_HTTP_Handler(srv))
}

func _UserBasic_UserLogin0_HTTP_Handler(srv UserBasicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserLoginRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBasicUserLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserLogin(ctx, req.(*UserLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserLoginResponse)
		return ctx.Result(200, reply)
	}
}

func _UserBasic_UserRegister0_HTTP_Handler(srv UserBasicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserRegisterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBasicUserRegister)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UserRegister(ctx, req.(*UserRegisterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserRegisterResponse)
		return ctx.Result(200, reply)
	}
}

func _UserBasic_UpdateUserInfo0_HTTP_Handler(srv UserBasicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UserUpdateInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBasicUpdateUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateUserInfo(ctx, req.(*UserUpdateInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserUpdateInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _UserBasic_GetUserInfo0_HTTP_Handler(srv UserBasicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetUserInfoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBasicGetUserInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetUserInfo(ctx, req.(*GetUserInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserInfoResponse)
		return ctx.Result(200, reply)
	}
}

func _UserBasic_SearchUserList0_HTTP_Handler(srv UserBasicHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SeaechUserListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserBasicSearchUserList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SearchUserList(ctx, req.(*SeaechUserListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UserListResponse)
		return ctx.Result(200, reply)
	}
}

type UserBasicHTTPClient interface {
	GetUserInfo(ctx context.Context, req *GetUserInfoRequest, opts ...http.CallOption) (rsp *UserInfoResponse, err error)
	SearchUserList(ctx context.Context, req *SeaechUserListRequest, opts ...http.CallOption) (rsp *UserListResponse, err error)
	UpdateUserInfo(ctx context.Context, req *UserUpdateInfoRequest, opts ...http.CallOption) (rsp *UserUpdateInfoResponse, err error)
	UserLogin(ctx context.Context, req *UserLoginRequest, opts ...http.CallOption) (rsp *UserLoginResponse, err error)
	UserRegister(ctx context.Context, req *UserRegisterRequest, opts ...http.CallOption) (rsp *UserRegisterResponse, err error)
}

type UserBasicHTTPClientImpl struct {
	cc *http.Client
}

func NewUserBasicHTTPClient(client *http.Client) UserBasicHTTPClient {
	return &UserBasicHTTPClientImpl{client}
}

func (c *UserBasicHTTPClientImpl) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...http.CallOption) (*UserInfoResponse, error) {
	var out UserInfoResponse
	pattern := "/v1/user_basic/info"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserBasicGetUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserBasicHTTPClientImpl) SearchUserList(ctx context.Context, in *SeaechUserListRequest, opts ...http.CallOption) (*UserListResponse, error) {
	var out UserListResponse
	pattern := "/v1/user_basic/search"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserBasicSearchUserList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserBasicHTTPClientImpl) UpdateUserInfo(ctx context.Context, in *UserUpdateInfoRequest, opts ...http.CallOption) (*UserUpdateInfoResponse, error) {
	var out UserUpdateInfoResponse
	pattern := "/v1/user_basic/update"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserBasicUpdateUserInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserBasicHTTPClientImpl) UserLogin(ctx context.Context, in *UserLoginRequest, opts ...http.CallOption) (*UserLoginResponse, error) {
	var out UserLoginResponse
	pattern := "/v1/user_basic/login"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserBasicUserLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserBasicHTTPClientImpl) UserRegister(ctx context.Context, in *UserRegisterRequest, opts ...http.CallOption) (*UserRegisterResponse, error) {
	var out UserRegisterResponse
	pattern := "/v1/user_basic/register"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserBasicUserRegister))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationUserRelationGetFollowedList = "/v1.UserRelation/GetFollowedList"
const OperationUserRelationGetFollowerList = "/v1.UserRelation/GetFollowerList"
const OperationUserRelationSetFollow = "/v1.UserRelation/SetFollow"

type UserRelationHTTPServer interface {
	// GetFollowedList 关注列表
	GetFollowedList(context.Context, *GetFollowedListRequest) (*FollowedListResponse, error)
	// GetFollowerList 粉丝列表
	GetFollowerList(context.Context, *GetFollowerListRequest) (*FollowerListResponse, error)
	// SetFollow 关注（互动）
	SetFollow(context.Context, *SetFollowRequest) (*SetFollowResponse, error)
}

func RegisterUserRelationHTTPServer(s *http.Server, srv UserRelationHTTPServer) {
	r := s.Route("/")
	r.POST("/v1/user_relation/set", _UserRelation_SetFollow0_HTTP_Handler(srv))
	r.GET("/v1/user_relation/followed", _UserRelation_GetFollowedList0_HTTP_Handler(srv))
	r.GET("/v1/user_relation/follower", _UserRelation_GetFollowerList0_HTTP_Handler(srv))
}

func _UserRelation_SetFollow0_HTTP_Handler(srv UserRelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SetFollowRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRelationSetFollow)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SetFollow(ctx, req.(*SetFollowRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SetFollowResponse)
		return ctx.Result(200, reply)
	}
}

func _UserRelation_GetFollowedList0_HTTP_Handler(srv UserRelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowedListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRelationGetFollowedList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowedList(ctx, req.(*GetFollowedListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowedListResponse)
		return ctx.Result(200, reply)
	}
}

func _UserRelation_GetFollowerList0_HTTP_Handler(srv UserRelationHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFollowerListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserRelationGetFollowerList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFollowerList(ctx, req.(*GetFollowerListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FollowerListResponse)
		return ctx.Result(200, reply)
	}
}

type UserRelationHTTPClient interface {
	GetFollowedList(ctx context.Context, req *GetFollowedListRequest, opts ...http.CallOption) (rsp *FollowedListResponse, err error)
	GetFollowerList(ctx context.Context, req *GetFollowerListRequest, opts ...http.CallOption) (rsp *FollowerListResponse, err error)
	SetFollow(ctx context.Context, req *SetFollowRequest, opts ...http.CallOption) (rsp *SetFollowResponse, err error)
}

type UserRelationHTTPClientImpl struct {
	cc *http.Client
}

func NewUserRelationHTTPClient(client *http.Client) UserRelationHTTPClient {
	return &UserRelationHTTPClientImpl{client}
}

func (c *UserRelationHTTPClientImpl) GetFollowedList(ctx context.Context, in *GetFollowedListRequest, opts ...http.CallOption) (*FollowedListResponse, error) {
	var out FollowedListResponse
	pattern := "/v1/user_relation/followed"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserRelationGetFollowedList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserRelationHTTPClientImpl) GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...http.CallOption) (*FollowerListResponse, error) {
	var out FollowerListResponse
	pattern := "/v1/user_relation/follower"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserRelationGetFollowerList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *UserRelationHTTPClientImpl) SetFollow(ctx context.Context, in *SetFollowRequest, opts ...http.CallOption) (*SetFollowResponse, error) {
	var out SetFollowResponse
	pattern := "/v1/user_relation/set"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationUserRelationSetFollow))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
