// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/app/user/internal/data/ent/videolike"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoLikeCreate is the builder for creating a VideoLike entity.
type VideoLikeCreate struct {
	config
	mutation *VideoLikeMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (vlc *VideoLikeCreate) SetUserID(i int) *VideoLikeCreate {
	vlc.mutation.SetUserID(i)
	return vlc
}

// SetVideoID sets the "video_id" field.
func (vlc *VideoLikeCreate) SetVideoID(i int) *VideoLikeCreate {
	vlc.mutation.SetVideoID(i)
	return vlc
}

// SetStatus sets the "status" field.
func (vlc *VideoLikeCreate) SetStatus(i int8) *VideoLikeCreate {
	vlc.mutation.SetStatus(i)
	return vlc
}

// SetCreateTime sets the "create_time" field.
func (vlc *VideoLikeCreate) SetCreateTime(t time.Time) *VideoLikeCreate {
	vlc.mutation.SetCreateTime(t)
	return vlc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vlc *VideoLikeCreate) SetNillableCreateTime(t *time.Time) *VideoLikeCreate {
	if t != nil {
		vlc.SetCreateTime(*t)
	}
	return vlc
}

// SetUpdateTime sets the "update_time" field.
func (vlc *VideoLikeCreate) SetUpdateTime(t time.Time) *VideoLikeCreate {
	vlc.mutation.SetUpdateTime(t)
	return vlc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vlc *VideoLikeCreate) SetNillableUpdateTime(t *time.Time) *VideoLikeCreate {
	if t != nil {
		vlc.SetUpdateTime(*t)
	}
	return vlc
}

// SetID sets the "id" field.
func (vlc *VideoLikeCreate) SetID(i int) *VideoLikeCreate {
	vlc.mutation.SetID(i)
	return vlc
}

// Mutation returns the VideoLikeMutation object of the builder.
func (vlc *VideoLikeCreate) Mutation() *VideoLikeMutation {
	return vlc.mutation
}

// Save creates the VideoLike in the database.
func (vlc *VideoLikeCreate) Save(ctx context.Context) (*VideoLike, error) {
	return withHooks(ctx, vlc.sqlSave, vlc.mutation, vlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vlc *VideoLikeCreate) SaveX(ctx context.Context) *VideoLike {
	v, err := vlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlc *VideoLikeCreate) Exec(ctx context.Context) error {
	_, err := vlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlc *VideoLikeCreate) ExecX(ctx context.Context) {
	if err := vlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vlc *VideoLikeCreate) check() error {
	if _, ok := vlc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "VideoLike.user_id"`)}
	}
	if _, ok := vlc.mutation.VideoID(); !ok {
		return &ValidationError{Name: "video_id", err: errors.New(`ent: missing required field "VideoLike.video_id"`)}
	}
	if _, ok := vlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "VideoLike.status"`)}
	}
	return nil
}

func (vlc *VideoLikeCreate) sqlSave(ctx context.Context) (*VideoLike, error) {
	if err := vlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	vlc.mutation.id = &_node.ID
	vlc.mutation.done = true
	return _node, nil
}

func (vlc *VideoLikeCreate) createSpec() (*VideoLike, *sqlgraph.CreateSpec) {
	var (
		_node = &VideoLike{config: vlc.config}
		_spec = sqlgraph.NewCreateSpec(videolike.Table, sqlgraph.NewFieldSpec(videolike.FieldID, field.TypeInt))
	)
	if id, ok := vlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := vlc.mutation.UserID(); ok {
		_spec.SetField(videolike.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := vlc.mutation.VideoID(); ok {
		_spec.SetField(videolike.FieldVideoID, field.TypeInt, value)
		_node.VideoID = value
	}
	if value, ok := vlc.mutation.Status(); ok {
		_spec.SetField(videolike.FieldStatus, field.TypeInt8, value)
		_node.Status = value
	}
	if value, ok := vlc.mutation.CreateTime(); ok {
		_spec.SetField(videolike.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := vlc.mutation.UpdateTime(); ok {
		_spec.SetField(videolike.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// VideoLikeCreateBulk is the builder for creating many VideoLike entities in bulk.
type VideoLikeCreateBulk struct {
	config
	err      error
	builders []*VideoLikeCreate
}

// Save creates the VideoLike entities in the database.
func (vlcb *VideoLikeCreateBulk) Save(ctx context.Context) ([]*VideoLike, error) {
	if vlcb.err != nil {
		return nil, vlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vlcb.builders))
	nodes := make([]*VideoLike, len(vlcb.builders))
	mutators := make([]Mutator, len(vlcb.builders))
	for i := range vlcb.builders {
		func(i int, root context.Context) {
			builder := vlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VideoLikeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vlcb *VideoLikeCreateBulk) SaveX(ctx context.Context) []*VideoLike {
	v, err := vlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vlcb *VideoLikeCreateBulk) Exec(ctx context.Context) error {
	_, err := vlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlcb *VideoLikeCreateBulk) ExecX(ctx context.Context) {
	if err := vlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
