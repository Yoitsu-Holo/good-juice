// Code generated by ent, DO NOT EDIT.

package userbaseinfo

import (
	"juice/app/user/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUserID, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUsername, v))
}

// Sex applies equality check predicate on the "sex" field. It's identical to SexEQ.
func Sex(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldSex, v))
}

// Birth applies equality check predicate on the "birth" field. It's identical to BirthEQ.
func Birth(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldBirth, v))
}

// Area applies equality check predicate on the "area" field. It's identical to AreaEQ.
func Area(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldArea, v))
}

// UserProfile applies equality check predicate on the "user_profile" field. It's identical to UserProfileEQ.
func UserProfile(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUserProfile, v))
}

// UserProfilePhotoURL applies equality check predicate on the "user_profile_photo_url" field. It's identical to UserProfilePhotoURLEQ.
func UserProfilePhotoURL(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUserProfilePhotoURL, v))
}

// FollowCount applies equality check predicate on the "follow_count" field. It's identical to FollowCountEQ.
func FollowCount(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldFollowCount, v))
}

// FanCount applies equality check predicate on the "fan_count" field. It's identical to FanCountEQ.
func FanCount(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldFanCount, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUpdateTime, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uint64) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldUserID, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldContainsFold(FieldUsername, v))
}

// SexEQ applies the EQ predicate on the "sex" field.
func SexEQ(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldSex, v))
}

// SexNEQ applies the NEQ predicate on the "sex" field.
func SexNEQ(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldSex, v))
}

// SexIn applies the In predicate on the "sex" field.
func SexIn(vs ...int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldSex, vs...))
}

// SexNotIn applies the NotIn predicate on the "sex" field.
func SexNotIn(vs ...int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldSex, vs...))
}

// SexGT applies the GT predicate on the "sex" field.
func SexGT(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldSex, v))
}

// SexGTE applies the GTE predicate on the "sex" field.
func SexGTE(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldSex, v))
}

// SexLT applies the LT predicate on the "sex" field.
func SexLT(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldSex, v))
}

// SexLTE applies the LTE predicate on the "sex" field.
func SexLTE(v int8) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldSex, v))
}

// BirthEQ applies the EQ predicate on the "birth" field.
func BirthEQ(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldBirth, v))
}

// BirthNEQ applies the NEQ predicate on the "birth" field.
func BirthNEQ(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldBirth, v))
}

// BirthIn applies the In predicate on the "birth" field.
func BirthIn(vs ...time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldBirth, vs...))
}

// BirthNotIn applies the NotIn predicate on the "birth" field.
func BirthNotIn(vs ...time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldBirth, vs...))
}

// BirthGT applies the GT predicate on the "birth" field.
func BirthGT(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldBirth, v))
}

// BirthGTE applies the GTE predicate on the "birth" field.
func BirthGTE(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldBirth, v))
}

// BirthLT applies the LT predicate on the "birth" field.
func BirthLT(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldBirth, v))
}

// BirthLTE applies the LTE predicate on the "birth" field.
func BirthLTE(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldBirth, v))
}

// BirthIsNil applies the IsNil predicate on the "birth" field.
func BirthIsNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIsNull(FieldBirth))
}

// BirthNotNil applies the NotNil predicate on the "birth" field.
func BirthNotNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotNull(FieldBirth))
}

// AreaEQ applies the EQ predicate on the "area" field.
func AreaEQ(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldArea, v))
}

// AreaNEQ applies the NEQ predicate on the "area" field.
func AreaNEQ(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldArea, v))
}

// AreaIn applies the In predicate on the "area" field.
func AreaIn(vs ...int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldArea, vs...))
}

// AreaNotIn applies the NotIn predicate on the "area" field.
func AreaNotIn(vs ...int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldArea, vs...))
}

// AreaGT applies the GT predicate on the "area" field.
func AreaGT(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldArea, v))
}

// AreaGTE applies the GTE predicate on the "area" field.
func AreaGTE(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldArea, v))
}

// AreaLT applies the LT predicate on the "area" field.
func AreaLT(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldArea, v))
}

// AreaLTE applies the LTE predicate on the "area" field.
func AreaLTE(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldArea, v))
}

// UserProfileEQ applies the EQ predicate on the "user_profile" field.
func UserProfileEQ(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUserProfile, v))
}

// UserProfileNEQ applies the NEQ predicate on the "user_profile" field.
func UserProfileNEQ(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldUserProfile, v))
}

// UserProfileIn applies the In predicate on the "user_profile" field.
func UserProfileIn(vs ...string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldUserProfile, vs...))
}

// UserProfileNotIn applies the NotIn predicate on the "user_profile" field.
func UserProfileNotIn(vs ...string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldUserProfile, vs...))
}

// UserProfileGT applies the GT predicate on the "user_profile" field.
func UserProfileGT(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldUserProfile, v))
}

// UserProfileGTE applies the GTE predicate on the "user_profile" field.
func UserProfileGTE(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldUserProfile, v))
}

// UserProfileLT applies the LT predicate on the "user_profile" field.
func UserProfileLT(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldUserProfile, v))
}

// UserProfileLTE applies the LTE predicate on the "user_profile" field.
func UserProfileLTE(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldUserProfile, v))
}

// UserProfileContains applies the Contains predicate on the "user_profile" field.
func UserProfileContains(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldContains(FieldUserProfile, v))
}

// UserProfileHasPrefix applies the HasPrefix predicate on the "user_profile" field.
func UserProfileHasPrefix(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldHasPrefix(FieldUserProfile, v))
}

// UserProfileHasSuffix applies the HasSuffix predicate on the "user_profile" field.
func UserProfileHasSuffix(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldHasSuffix(FieldUserProfile, v))
}

// UserProfileIsNil applies the IsNil predicate on the "user_profile" field.
func UserProfileIsNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIsNull(FieldUserProfile))
}

// UserProfileNotNil applies the NotNil predicate on the "user_profile" field.
func UserProfileNotNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotNull(FieldUserProfile))
}

// UserProfileEqualFold applies the EqualFold predicate on the "user_profile" field.
func UserProfileEqualFold(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEqualFold(FieldUserProfile, v))
}

// UserProfileContainsFold applies the ContainsFold predicate on the "user_profile" field.
func UserProfileContainsFold(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldContainsFold(FieldUserProfile, v))
}

// UserProfilePhotoURLEQ applies the EQ predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLEQ(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLNEQ applies the NEQ predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLNEQ(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLIn applies the In predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLIn(vs ...string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldUserProfilePhotoURL, vs...))
}

// UserProfilePhotoURLNotIn applies the NotIn predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLNotIn(vs ...string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldUserProfilePhotoURL, vs...))
}

// UserProfilePhotoURLGT applies the GT predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLGT(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLGTE applies the GTE predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLGTE(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLLT applies the LT predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLLT(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLLTE applies the LTE predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLLTE(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLContains applies the Contains predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLContains(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldContains(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLHasPrefix applies the HasPrefix predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLHasPrefix(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldHasPrefix(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLHasSuffix applies the HasSuffix predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLHasSuffix(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldHasSuffix(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLIsNil applies the IsNil predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLIsNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIsNull(FieldUserProfilePhotoURL))
}

// UserProfilePhotoURLNotNil applies the NotNil predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLNotNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotNull(FieldUserProfilePhotoURL))
}

// UserProfilePhotoURLEqualFold applies the EqualFold predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLEqualFold(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEqualFold(FieldUserProfilePhotoURL, v))
}

// UserProfilePhotoURLContainsFold applies the ContainsFold predicate on the "user_profile_photo_url" field.
func UserProfilePhotoURLContainsFold(v string) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldContainsFold(FieldUserProfilePhotoURL, v))
}

// FollowCountEQ applies the EQ predicate on the "follow_count" field.
func FollowCountEQ(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldFollowCount, v))
}

// FollowCountNEQ applies the NEQ predicate on the "follow_count" field.
func FollowCountNEQ(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldFollowCount, v))
}

// FollowCountIn applies the In predicate on the "follow_count" field.
func FollowCountIn(vs ...int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldFollowCount, vs...))
}

// FollowCountNotIn applies the NotIn predicate on the "follow_count" field.
func FollowCountNotIn(vs ...int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldFollowCount, vs...))
}

// FollowCountGT applies the GT predicate on the "follow_count" field.
func FollowCountGT(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldFollowCount, v))
}

// FollowCountGTE applies the GTE predicate on the "follow_count" field.
func FollowCountGTE(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldFollowCount, v))
}

// FollowCountLT applies the LT predicate on the "follow_count" field.
func FollowCountLT(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldFollowCount, v))
}

// FollowCountLTE applies the LTE predicate on the "follow_count" field.
func FollowCountLTE(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldFollowCount, v))
}

// FanCountEQ applies the EQ predicate on the "fan_count" field.
func FanCountEQ(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldFanCount, v))
}

// FanCountNEQ applies the NEQ predicate on the "fan_count" field.
func FanCountNEQ(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldFanCount, v))
}

// FanCountIn applies the In predicate on the "fan_count" field.
func FanCountIn(vs ...int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldFanCount, vs...))
}

// FanCountNotIn applies the NotIn predicate on the "fan_count" field.
func FanCountNotIn(vs ...int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldFanCount, vs...))
}

// FanCountGT applies the GT predicate on the "fan_count" field.
func FanCountGT(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldFanCount, v))
}

// FanCountGTE applies the GTE predicate on the "fan_count" field.
func FanCountGTE(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldFanCount, v))
}

// FanCountLT applies the LT predicate on the "fan_count" field.
func FanCountLT(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldFanCount, v))
}

// FanCountLTE applies the LTE predicate on the "fan_count" field.
func FanCountLTE(v int32) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldFanCount, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldCreateTime, v))
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIsNull(FieldCreateTime))
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotNull(FieldCreateTime))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldLTE(FieldUpdateTime, v))
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldIsNull(FieldUpdateTime))
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.FieldNotNull(FieldUpdateTime))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserBaseInfo) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserBaseInfo) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserBaseInfo) predicate.UserBaseInfo {
	return predicate.UserBaseInfo(sql.NotPredicates(p))
}
