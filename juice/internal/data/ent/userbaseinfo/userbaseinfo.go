// Code generated by ent, DO NOT EDIT.

package userbaseinfo

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the userbaseinfo type in the database.
	Label = "user_base_info"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldSex holds the string denoting the sex field in the database.
	FieldSex = "sex"
	// FieldBirth holds the string denoting the birth field in the database.
	FieldBirth = "birth"
	// FieldArea holds the string denoting the area field in the database.
	FieldArea = "area"
	// FieldUserProfile holds the string denoting the user_profile field in the database.
	FieldUserProfile = "user_profile"
	// FieldUserProfilePhotoURL holds the string denoting the user_profile_photo_url field in the database.
	FieldUserProfilePhotoURL = "user_profile_photo_url"
	// FieldFollowCount holds the string denoting the follow_count field in the database.
	FieldFollowCount = "follow_count"
	// FieldFanCount holds the string denoting the fan_count field in the database.
	FieldFanCount = "fan_count"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the userbaseinfo in the database.
	Table = "user_base_infos"
)

// Columns holds all SQL columns for userbaseinfo fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldUsername,
	FieldSex,
	FieldBirth,
	FieldArea,
	FieldUserProfile,
	FieldUserProfilePhotoURL,
	FieldFollowCount,
	FieldFanCount,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(int64) error
	// DefaultBirth holds the default value on creation for the "birth" field.
	DefaultBirth func() time.Time
	// DefaultFollowCount holds the default value on creation for the "follow_count" field.
	DefaultFollowCount int32
	// DefaultFanCount holds the default value on creation for the "fan_count" field.
	DefaultFanCount int32
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime func() time.Time
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime func() time.Time
	// UpdateDefaultUpdateTime holds the default value on update for the "update_time" field.
	UpdateDefaultUpdateTime func() time.Time
)

// OrderOption defines the ordering options for the UserBaseInfo queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// BySex orders the results by the sex field.
func BySex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSex, opts...).ToFunc()
}

// ByBirth orders the results by the birth field.
func ByBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBirth, opts...).ToFunc()
}

// ByArea orders the results by the area field.
func ByArea(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArea, opts...).ToFunc()
}

// ByUserProfile orders the results by the user_profile field.
func ByUserProfile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserProfile, opts...).ToFunc()
}

// ByUserProfilePhotoURL orders the results by the user_profile_photo_url field.
func ByUserProfilePhotoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserProfilePhotoURL, opts...).ToFunc()
}

// ByFollowCount orders the results by the follow_count field.
func ByFollowCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFollowCount, opts...).ToFunc()
}

// ByFanCount orders the results by the fan_count field.
func ByFanCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFanCount, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
