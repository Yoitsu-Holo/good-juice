// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/internal/data/ent/predicate"
	"juice/internal/data/ent/videocomment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoCommentUpdate is the builder for updating VideoComment entities.
type VideoCommentUpdate struct {
	config
	hooks    []Hook
	mutation *VideoCommentMutation
}

// Where appends a list predicates to the VideoCommentUpdate builder.
func (vcu *VideoCommentUpdate) Where(ps ...predicate.VideoComment) *VideoCommentUpdate {
	vcu.mutation.Where(ps...)
	return vcu
}

// SetCommentID sets the "comment_id" field.
func (vcu *VideoCommentUpdate) SetCommentID(i int64) *VideoCommentUpdate {
	vcu.mutation.ResetCommentID()
	vcu.mutation.SetCommentID(i)
	return vcu
}

// AddCommentID adds i to the "comment_id" field.
func (vcu *VideoCommentUpdate) AddCommentID(i int64) *VideoCommentUpdate {
	vcu.mutation.AddCommentID(i)
	return vcu
}

// SetPcommentID sets the "pcomment_id" field.
func (vcu *VideoCommentUpdate) SetPcommentID(i int64) *VideoCommentUpdate {
	vcu.mutation.ResetPcommentID()
	vcu.mutation.SetPcommentID(i)
	return vcu
}

// AddPcommentID adds i to the "pcomment_id" field.
func (vcu *VideoCommentUpdate) AddPcommentID(i int64) *VideoCommentUpdate {
	vcu.mutation.AddPcommentID(i)
	return vcu
}

// SetVideoID sets the "video_id" field.
func (vcu *VideoCommentUpdate) SetVideoID(i int64) *VideoCommentUpdate {
	vcu.mutation.ResetVideoID()
	vcu.mutation.SetVideoID(i)
	return vcu
}

// AddVideoID adds i to the "video_id" field.
func (vcu *VideoCommentUpdate) AddVideoID(i int64) *VideoCommentUpdate {
	vcu.mutation.AddVideoID(i)
	return vcu
}

// SetUserID sets the "user_id" field.
func (vcu *VideoCommentUpdate) SetUserID(i int64) *VideoCommentUpdate {
	vcu.mutation.ResetUserID()
	vcu.mutation.SetUserID(i)
	return vcu
}

// AddUserID adds i to the "user_id" field.
func (vcu *VideoCommentUpdate) AddUserID(i int64) *VideoCommentUpdate {
	vcu.mutation.AddUserID(i)
	return vcu
}

// SetCommentText sets the "comment_text" field.
func (vcu *VideoCommentUpdate) SetCommentText(s string) *VideoCommentUpdate {
	vcu.mutation.SetCommentText(s)
	return vcu
}

// SetNillableCommentText sets the "comment_text" field if the given value is not nil.
func (vcu *VideoCommentUpdate) SetNillableCommentText(s *string) *VideoCommentUpdate {
	if s != nil {
		vcu.SetCommentText(*s)
	}
	return vcu
}

// ClearCommentText clears the value of the "comment_text" field.
func (vcu *VideoCommentUpdate) ClearCommentText() *VideoCommentUpdate {
	vcu.mutation.ClearCommentText()
	return vcu
}

// SetCreateTime sets the "create_time" field.
func (vcu *VideoCommentUpdate) SetCreateTime(t time.Time) *VideoCommentUpdate {
	vcu.mutation.SetCreateTime(t)
	return vcu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vcu *VideoCommentUpdate) SetNillableCreateTime(t *time.Time) *VideoCommentUpdate {
	if t != nil {
		vcu.SetCreateTime(*t)
	}
	return vcu
}

// SetUpdateTime sets the "update_time" field.
func (vcu *VideoCommentUpdate) SetUpdateTime(t time.Time) *VideoCommentUpdate {
	vcu.mutation.SetUpdateTime(t)
	return vcu
}

// Mutation returns the VideoCommentMutation object of the builder.
func (vcu *VideoCommentUpdate) Mutation() *VideoCommentMutation {
	return vcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vcu *VideoCommentUpdate) Save(ctx context.Context) (int, error) {
	vcu.defaults()
	return withHooks(ctx, vcu.sqlSave, vcu.mutation, vcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcu *VideoCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := vcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vcu *VideoCommentUpdate) Exec(ctx context.Context) error {
	_, err := vcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcu *VideoCommentUpdate) ExecX(ctx context.Context) {
	if err := vcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcu *VideoCommentUpdate) defaults() {
	if _, ok := vcu.mutation.UpdateTime(); !ok {
		v := videocomment.UpdateDefaultUpdateTime()
		vcu.mutation.SetUpdateTime(v)
	}
}

func (vcu *VideoCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(videocomment.Table, videocomment.Columns, sqlgraph.NewFieldSpec(videocomment.FieldID, field.TypeInt))
	if ps := vcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcu.mutation.CommentID(); ok {
		_spec.SetField(videocomment.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedCommentID(); ok {
		_spec.AddField(videocomment.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.PcommentID(); ok {
		_spec.SetField(videocomment.FieldPcommentID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedPcommentID(); ok {
		_spec.AddField(videocomment.FieldPcommentID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.VideoID(); ok {
		_spec.SetField(videocomment.FieldVideoID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedVideoID(); ok {
		_spec.AddField(videocomment.FieldVideoID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.UserID(); ok {
		_spec.SetField(videocomment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.AddedUserID(); ok {
		_spec.AddField(videocomment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vcu.mutation.CommentText(); ok {
		_spec.SetField(videocomment.FieldCommentText, field.TypeString, value)
	}
	if vcu.mutation.CommentTextCleared() {
		_spec.ClearField(videocomment.FieldCommentText, field.TypeString)
	}
	if value, ok := vcu.mutation.CreateTime(); ok {
		_spec.SetField(videocomment.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := vcu.mutation.UpdateTime(); ok {
		_spec.SetField(videocomment.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videocomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vcu.mutation.done = true
	return n, nil
}

// VideoCommentUpdateOne is the builder for updating a single VideoComment entity.
type VideoCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoCommentMutation
}

// SetCommentID sets the "comment_id" field.
func (vcuo *VideoCommentUpdateOne) SetCommentID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.ResetCommentID()
	vcuo.mutation.SetCommentID(i)
	return vcuo
}

// AddCommentID adds i to the "comment_id" field.
func (vcuo *VideoCommentUpdateOne) AddCommentID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.AddCommentID(i)
	return vcuo
}

// SetPcommentID sets the "pcomment_id" field.
func (vcuo *VideoCommentUpdateOne) SetPcommentID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.ResetPcommentID()
	vcuo.mutation.SetPcommentID(i)
	return vcuo
}

// AddPcommentID adds i to the "pcomment_id" field.
func (vcuo *VideoCommentUpdateOne) AddPcommentID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.AddPcommentID(i)
	return vcuo
}

// SetVideoID sets the "video_id" field.
func (vcuo *VideoCommentUpdateOne) SetVideoID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.ResetVideoID()
	vcuo.mutation.SetVideoID(i)
	return vcuo
}

// AddVideoID adds i to the "video_id" field.
func (vcuo *VideoCommentUpdateOne) AddVideoID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.AddVideoID(i)
	return vcuo
}

// SetUserID sets the "user_id" field.
func (vcuo *VideoCommentUpdateOne) SetUserID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.ResetUserID()
	vcuo.mutation.SetUserID(i)
	return vcuo
}

// AddUserID adds i to the "user_id" field.
func (vcuo *VideoCommentUpdateOne) AddUserID(i int64) *VideoCommentUpdateOne {
	vcuo.mutation.AddUserID(i)
	return vcuo
}

// SetCommentText sets the "comment_text" field.
func (vcuo *VideoCommentUpdateOne) SetCommentText(s string) *VideoCommentUpdateOne {
	vcuo.mutation.SetCommentText(s)
	return vcuo
}

// SetNillableCommentText sets the "comment_text" field if the given value is not nil.
func (vcuo *VideoCommentUpdateOne) SetNillableCommentText(s *string) *VideoCommentUpdateOne {
	if s != nil {
		vcuo.SetCommentText(*s)
	}
	return vcuo
}

// ClearCommentText clears the value of the "comment_text" field.
func (vcuo *VideoCommentUpdateOne) ClearCommentText() *VideoCommentUpdateOne {
	vcuo.mutation.ClearCommentText()
	return vcuo
}

// SetCreateTime sets the "create_time" field.
func (vcuo *VideoCommentUpdateOne) SetCreateTime(t time.Time) *VideoCommentUpdateOne {
	vcuo.mutation.SetCreateTime(t)
	return vcuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vcuo *VideoCommentUpdateOne) SetNillableCreateTime(t *time.Time) *VideoCommentUpdateOne {
	if t != nil {
		vcuo.SetCreateTime(*t)
	}
	return vcuo
}

// SetUpdateTime sets the "update_time" field.
func (vcuo *VideoCommentUpdateOne) SetUpdateTime(t time.Time) *VideoCommentUpdateOne {
	vcuo.mutation.SetUpdateTime(t)
	return vcuo
}

// Mutation returns the VideoCommentMutation object of the builder.
func (vcuo *VideoCommentUpdateOne) Mutation() *VideoCommentMutation {
	return vcuo.mutation
}

// Where appends a list predicates to the VideoCommentUpdate builder.
func (vcuo *VideoCommentUpdateOne) Where(ps ...predicate.VideoComment) *VideoCommentUpdateOne {
	vcuo.mutation.Where(ps...)
	return vcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vcuo *VideoCommentUpdateOne) Select(field string, fields ...string) *VideoCommentUpdateOne {
	vcuo.fields = append([]string{field}, fields...)
	return vcuo
}

// Save executes the query and returns the updated VideoComment entity.
func (vcuo *VideoCommentUpdateOne) Save(ctx context.Context) (*VideoComment, error) {
	vcuo.defaults()
	return withHooks(ctx, vcuo.sqlSave, vcuo.mutation, vcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vcuo *VideoCommentUpdateOne) SaveX(ctx context.Context) *VideoComment {
	node, err := vcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vcuo *VideoCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := vcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcuo *VideoCommentUpdateOne) ExecX(ctx context.Context) {
	if err := vcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vcuo *VideoCommentUpdateOne) defaults() {
	if _, ok := vcuo.mutation.UpdateTime(); !ok {
		v := videocomment.UpdateDefaultUpdateTime()
		vcuo.mutation.SetUpdateTime(v)
	}
}

func (vcuo *VideoCommentUpdateOne) sqlSave(ctx context.Context) (_node *VideoComment, err error) {
	_spec := sqlgraph.NewUpdateSpec(videocomment.Table, videocomment.Columns, sqlgraph.NewFieldSpec(videocomment.FieldID, field.TypeInt))
	id, ok := vcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videocomment.FieldID)
		for _, f := range fields {
			if !videocomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videocomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vcuo.mutation.CommentID(); ok {
		_spec.SetField(videocomment.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedCommentID(); ok {
		_spec.AddField(videocomment.FieldCommentID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.PcommentID(); ok {
		_spec.SetField(videocomment.FieldPcommentID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedPcommentID(); ok {
		_spec.AddField(videocomment.FieldPcommentID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.VideoID(); ok {
		_spec.SetField(videocomment.FieldVideoID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedVideoID(); ok {
		_spec.AddField(videocomment.FieldVideoID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.UserID(); ok {
		_spec.SetField(videocomment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.AddedUserID(); ok {
		_spec.AddField(videocomment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := vcuo.mutation.CommentText(); ok {
		_spec.SetField(videocomment.FieldCommentText, field.TypeString, value)
	}
	if vcuo.mutation.CommentTextCleared() {
		_spec.ClearField(videocomment.FieldCommentText, field.TypeString)
	}
	if value, ok := vcuo.mutation.CreateTime(); ok {
		_spec.SetField(videocomment.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := vcuo.mutation.UpdateTime(); ok {
		_spec.SetField(videocomment.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &VideoComment{config: vcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videocomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vcuo.mutation.done = true
	return _node, nil
}
