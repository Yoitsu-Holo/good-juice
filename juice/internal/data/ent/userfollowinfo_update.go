// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/internal/data/ent/predicate"
	"juice/internal/data/ent/userfollowinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserFollowInfoUpdate is the builder for updating UserFollowInfo entities.
type UserFollowInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserFollowInfoMutation
}

// Where appends a list predicates to the UserFollowInfoUpdate builder.
func (ufiu *UserFollowInfoUpdate) Where(ps ...predicate.UserFollowInfo) *UserFollowInfoUpdate {
	ufiu.mutation.Where(ps...)
	return ufiu
}

// SetUserID sets the "user_id" field.
func (ufiu *UserFollowInfoUpdate) SetUserID(u uint64) *UserFollowInfoUpdate {
	ufiu.mutation.ResetUserID()
	ufiu.mutation.SetUserID(u)
	return ufiu
}

// AddUserID adds u to the "user_id" field.
func (ufiu *UserFollowInfoUpdate) AddUserID(u int64) *UserFollowInfoUpdate {
	ufiu.mutation.AddUserID(u)
	return ufiu
}

// SetFollowID sets the "follow_id" field.
func (ufiu *UserFollowInfoUpdate) SetFollowID(u uint64) *UserFollowInfoUpdate {
	ufiu.mutation.ResetFollowID()
	ufiu.mutation.SetFollowID(u)
	return ufiu
}

// AddFollowID adds u to the "follow_id" field.
func (ufiu *UserFollowInfoUpdate) AddFollowID(u int64) *UserFollowInfoUpdate {
	ufiu.mutation.AddFollowID(u)
	return ufiu
}

// SetStatus sets the "status" field.
func (ufiu *UserFollowInfoUpdate) SetStatus(i int8) *UserFollowInfoUpdate {
	ufiu.mutation.ResetStatus()
	ufiu.mutation.SetStatus(i)
	return ufiu
}

// AddStatus adds i to the "status" field.
func (ufiu *UserFollowInfoUpdate) AddStatus(i int8) *UserFollowInfoUpdate {
	ufiu.mutation.AddStatus(i)
	return ufiu
}

// SetCreateTime sets the "create_time" field.
func (ufiu *UserFollowInfoUpdate) SetCreateTime(t time.Time) *UserFollowInfoUpdate {
	ufiu.mutation.SetCreateTime(t)
	return ufiu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ufiu *UserFollowInfoUpdate) SetNillableCreateTime(t *time.Time) *UserFollowInfoUpdate {
	if t != nil {
		ufiu.SetCreateTime(*t)
	}
	return ufiu
}

// ClearCreateTime clears the value of the "create_time" field.
func (ufiu *UserFollowInfoUpdate) ClearCreateTime() *UserFollowInfoUpdate {
	ufiu.mutation.ClearCreateTime()
	return ufiu
}

// SetUpdateTime sets the "update_time" field.
func (ufiu *UserFollowInfoUpdate) SetUpdateTime(t time.Time) *UserFollowInfoUpdate {
	ufiu.mutation.SetUpdateTime(t)
	return ufiu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ufiu *UserFollowInfoUpdate) SetNillableUpdateTime(t *time.Time) *UserFollowInfoUpdate {
	if t != nil {
		ufiu.SetUpdateTime(*t)
	}
	return ufiu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ufiu *UserFollowInfoUpdate) ClearUpdateTime() *UserFollowInfoUpdate {
	ufiu.mutation.ClearUpdateTime()
	return ufiu
}

// Mutation returns the UserFollowInfoMutation object of the builder.
func (ufiu *UserFollowInfoUpdate) Mutation() *UserFollowInfoMutation {
	return ufiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufiu *UserFollowInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ufiu.sqlSave, ufiu.mutation, ufiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufiu *UserFollowInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := ufiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufiu *UserFollowInfoUpdate) Exec(ctx context.Context) error {
	_, err := ufiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufiu *UserFollowInfoUpdate) ExecX(ctx context.Context) {
	if err := ufiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufiu *UserFollowInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollowinfo.Table, userfollowinfo.Columns, sqlgraph.NewFieldSpec(userfollowinfo.FieldID, field.TypeInt))
	if ps := ufiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufiu.mutation.UserID(); ok {
		_spec.SetField(userfollowinfo.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ufiu.mutation.AddedUserID(); ok {
		_spec.AddField(userfollowinfo.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ufiu.mutation.FollowID(); ok {
		_spec.SetField(userfollowinfo.FieldFollowID, field.TypeUint64, value)
	}
	if value, ok := ufiu.mutation.AddedFollowID(); ok {
		_spec.AddField(userfollowinfo.FieldFollowID, field.TypeUint64, value)
	}
	if value, ok := ufiu.mutation.Status(); ok {
		_spec.SetField(userfollowinfo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ufiu.mutation.AddedStatus(); ok {
		_spec.AddField(userfollowinfo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ufiu.mutation.CreateTime(); ok {
		_spec.SetField(userfollowinfo.FieldCreateTime, field.TypeTime, value)
	}
	if ufiu.mutation.CreateTimeCleared() {
		_spec.ClearField(userfollowinfo.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ufiu.mutation.UpdateTime(); ok {
		_spec.SetField(userfollowinfo.FieldUpdateTime, field.TypeTime, value)
	}
	if ufiu.mutation.UpdateTimeCleared() {
		_spec.ClearField(userfollowinfo.FieldUpdateTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufiu.mutation.done = true
	return n, nil
}

// UserFollowInfoUpdateOne is the builder for updating a single UserFollowInfo entity.
type UserFollowInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserFollowInfoMutation
}

// SetUserID sets the "user_id" field.
func (ufiuo *UserFollowInfoUpdateOne) SetUserID(u uint64) *UserFollowInfoUpdateOne {
	ufiuo.mutation.ResetUserID()
	ufiuo.mutation.SetUserID(u)
	return ufiuo
}

// AddUserID adds u to the "user_id" field.
func (ufiuo *UserFollowInfoUpdateOne) AddUserID(u int64) *UserFollowInfoUpdateOne {
	ufiuo.mutation.AddUserID(u)
	return ufiuo
}

// SetFollowID sets the "follow_id" field.
func (ufiuo *UserFollowInfoUpdateOne) SetFollowID(u uint64) *UserFollowInfoUpdateOne {
	ufiuo.mutation.ResetFollowID()
	ufiuo.mutation.SetFollowID(u)
	return ufiuo
}

// AddFollowID adds u to the "follow_id" field.
func (ufiuo *UserFollowInfoUpdateOne) AddFollowID(u int64) *UserFollowInfoUpdateOne {
	ufiuo.mutation.AddFollowID(u)
	return ufiuo
}

// SetStatus sets the "status" field.
func (ufiuo *UserFollowInfoUpdateOne) SetStatus(i int8) *UserFollowInfoUpdateOne {
	ufiuo.mutation.ResetStatus()
	ufiuo.mutation.SetStatus(i)
	return ufiuo
}

// AddStatus adds i to the "status" field.
func (ufiuo *UserFollowInfoUpdateOne) AddStatus(i int8) *UserFollowInfoUpdateOne {
	ufiuo.mutation.AddStatus(i)
	return ufiuo
}

// SetCreateTime sets the "create_time" field.
func (ufiuo *UserFollowInfoUpdateOne) SetCreateTime(t time.Time) *UserFollowInfoUpdateOne {
	ufiuo.mutation.SetCreateTime(t)
	return ufiuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ufiuo *UserFollowInfoUpdateOne) SetNillableCreateTime(t *time.Time) *UserFollowInfoUpdateOne {
	if t != nil {
		ufiuo.SetCreateTime(*t)
	}
	return ufiuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (ufiuo *UserFollowInfoUpdateOne) ClearCreateTime() *UserFollowInfoUpdateOne {
	ufiuo.mutation.ClearCreateTime()
	return ufiuo
}

// SetUpdateTime sets the "update_time" field.
func (ufiuo *UserFollowInfoUpdateOne) SetUpdateTime(t time.Time) *UserFollowInfoUpdateOne {
	ufiuo.mutation.SetUpdateTime(t)
	return ufiuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ufiuo *UserFollowInfoUpdateOne) SetNillableUpdateTime(t *time.Time) *UserFollowInfoUpdateOne {
	if t != nil {
		ufiuo.SetUpdateTime(*t)
	}
	return ufiuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (ufiuo *UserFollowInfoUpdateOne) ClearUpdateTime() *UserFollowInfoUpdateOne {
	ufiuo.mutation.ClearUpdateTime()
	return ufiuo
}

// Mutation returns the UserFollowInfoMutation object of the builder.
func (ufiuo *UserFollowInfoUpdateOne) Mutation() *UserFollowInfoMutation {
	return ufiuo.mutation
}

// Where appends a list predicates to the UserFollowInfoUpdate builder.
func (ufiuo *UserFollowInfoUpdateOne) Where(ps ...predicate.UserFollowInfo) *UserFollowInfoUpdateOne {
	ufiuo.mutation.Where(ps...)
	return ufiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufiuo *UserFollowInfoUpdateOne) Select(field string, fields ...string) *UserFollowInfoUpdateOne {
	ufiuo.fields = append([]string{field}, fields...)
	return ufiuo
}

// Save executes the query and returns the updated UserFollowInfo entity.
func (ufiuo *UserFollowInfoUpdateOne) Save(ctx context.Context) (*UserFollowInfo, error) {
	return withHooks(ctx, ufiuo.sqlSave, ufiuo.mutation, ufiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufiuo *UserFollowInfoUpdateOne) SaveX(ctx context.Context) *UserFollowInfo {
	node, err := ufiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufiuo *UserFollowInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := ufiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufiuo *UserFollowInfoUpdateOne) ExecX(ctx context.Context) {
	if err := ufiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ufiuo *UserFollowInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserFollowInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(userfollowinfo.Table, userfollowinfo.Columns, sqlgraph.NewFieldSpec(userfollowinfo.FieldID, field.TypeInt))
	id, ok := ufiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserFollowInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userfollowinfo.FieldID)
		for _, f := range fields {
			if !userfollowinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userfollowinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufiuo.mutation.UserID(); ok {
		_spec.SetField(userfollowinfo.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ufiuo.mutation.AddedUserID(); ok {
		_spec.AddField(userfollowinfo.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := ufiuo.mutation.FollowID(); ok {
		_spec.SetField(userfollowinfo.FieldFollowID, field.TypeUint64, value)
	}
	if value, ok := ufiuo.mutation.AddedFollowID(); ok {
		_spec.AddField(userfollowinfo.FieldFollowID, field.TypeUint64, value)
	}
	if value, ok := ufiuo.mutation.Status(); ok {
		_spec.SetField(userfollowinfo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ufiuo.mutation.AddedStatus(); ok {
		_spec.AddField(userfollowinfo.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := ufiuo.mutation.CreateTime(); ok {
		_spec.SetField(userfollowinfo.FieldCreateTime, field.TypeTime, value)
	}
	if ufiuo.mutation.CreateTimeCleared() {
		_spec.ClearField(userfollowinfo.FieldCreateTime, field.TypeTime)
	}
	if value, ok := ufiuo.mutation.UpdateTime(); ok {
		_spec.SetField(userfollowinfo.FieldUpdateTime, field.TypeTime, value)
	}
	if ufiuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(userfollowinfo.FieldUpdateTime, field.TypeTime)
	}
	_node = &UserFollowInfo{config: ufiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userfollowinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufiuo.mutation.done = true
	return _node, nil
}
