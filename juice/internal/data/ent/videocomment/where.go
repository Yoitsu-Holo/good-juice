// Code generated by ent, DO NOT EDIT.

package videocomment

import (
	"juice/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldID, id))
}

// CommentID applies equality check predicate on the "comment_id" field. It's identical to CommentIDEQ.
func CommentID(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldCommentID, v))
}

// PcommentID applies equality check predicate on the "pcomment_id" field. It's identical to PcommentIDEQ.
func PcommentID(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldPcommentID, v))
}

// VideoID applies equality check predicate on the "video_id" field. It's identical to VideoIDEQ.
func VideoID(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldVideoID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldUserID, v))
}

// CommentText applies equality check predicate on the "comment_text" field. It's identical to CommentTextEQ.
func CommentText(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldCommentText, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldUpdateTime, v))
}

// CommentIDEQ applies the EQ predicate on the "comment_id" field.
func CommentIDEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldCommentID, v))
}

// CommentIDNEQ applies the NEQ predicate on the "comment_id" field.
func CommentIDNEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldCommentID, v))
}

// CommentIDIn applies the In predicate on the "comment_id" field.
func CommentIDIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldCommentID, vs...))
}

// CommentIDNotIn applies the NotIn predicate on the "comment_id" field.
func CommentIDNotIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldCommentID, vs...))
}

// CommentIDGT applies the GT predicate on the "comment_id" field.
func CommentIDGT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldCommentID, v))
}

// CommentIDGTE applies the GTE predicate on the "comment_id" field.
func CommentIDGTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldCommentID, v))
}

// CommentIDLT applies the LT predicate on the "comment_id" field.
func CommentIDLT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldCommentID, v))
}

// CommentIDLTE applies the LTE predicate on the "comment_id" field.
func CommentIDLTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldCommentID, v))
}

// PcommentIDEQ applies the EQ predicate on the "pcomment_id" field.
func PcommentIDEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldPcommentID, v))
}

// PcommentIDNEQ applies the NEQ predicate on the "pcomment_id" field.
func PcommentIDNEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldPcommentID, v))
}

// PcommentIDIn applies the In predicate on the "pcomment_id" field.
func PcommentIDIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldPcommentID, vs...))
}

// PcommentIDNotIn applies the NotIn predicate on the "pcomment_id" field.
func PcommentIDNotIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldPcommentID, vs...))
}

// PcommentIDGT applies the GT predicate on the "pcomment_id" field.
func PcommentIDGT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldPcommentID, v))
}

// PcommentIDGTE applies the GTE predicate on the "pcomment_id" field.
func PcommentIDGTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldPcommentID, v))
}

// PcommentIDLT applies the LT predicate on the "pcomment_id" field.
func PcommentIDLT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldPcommentID, v))
}

// PcommentIDLTE applies the LTE predicate on the "pcomment_id" field.
func PcommentIDLTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldPcommentID, v))
}

// VideoIDEQ applies the EQ predicate on the "video_id" field.
func VideoIDEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldVideoID, v))
}

// VideoIDNEQ applies the NEQ predicate on the "video_id" field.
func VideoIDNEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldVideoID, v))
}

// VideoIDIn applies the In predicate on the "video_id" field.
func VideoIDIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldVideoID, vs...))
}

// VideoIDNotIn applies the NotIn predicate on the "video_id" field.
func VideoIDNotIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldVideoID, vs...))
}

// VideoIDGT applies the GT predicate on the "video_id" field.
func VideoIDGT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldVideoID, v))
}

// VideoIDGTE applies the GTE predicate on the "video_id" field.
func VideoIDGTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldVideoID, v))
}

// VideoIDLT applies the LT predicate on the "video_id" field.
func VideoIDLT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldVideoID, v))
}

// VideoIDLTE applies the LTE predicate on the "video_id" field.
func VideoIDLTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldVideoID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int64) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldUserID, v))
}

// CommentTextEQ applies the EQ predicate on the "comment_text" field.
func CommentTextEQ(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldCommentText, v))
}

// CommentTextNEQ applies the NEQ predicate on the "comment_text" field.
func CommentTextNEQ(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldCommentText, v))
}

// CommentTextIn applies the In predicate on the "comment_text" field.
func CommentTextIn(vs ...string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldCommentText, vs...))
}

// CommentTextNotIn applies the NotIn predicate on the "comment_text" field.
func CommentTextNotIn(vs ...string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldCommentText, vs...))
}

// CommentTextGT applies the GT predicate on the "comment_text" field.
func CommentTextGT(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldCommentText, v))
}

// CommentTextGTE applies the GTE predicate on the "comment_text" field.
func CommentTextGTE(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldCommentText, v))
}

// CommentTextLT applies the LT predicate on the "comment_text" field.
func CommentTextLT(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldCommentText, v))
}

// CommentTextLTE applies the LTE predicate on the "comment_text" field.
func CommentTextLTE(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldCommentText, v))
}

// CommentTextContains applies the Contains predicate on the "comment_text" field.
func CommentTextContains(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldContains(FieldCommentText, v))
}

// CommentTextHasPrefix applies the HasPrefix predicate on the "comment_text" field.
func CommentTextHasPrefix(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldHasPrefix(FieldCommentText, v))
}

// CommentTextHasSuffix applies the HasSuffix predicate on the "comment_text" field.
func CommentTextHasSuffix(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldHasSuffix(FieldCommentText, v))
}

// CommentTextIsNil applies the IsNil predicate on the "comment_text" field.
func CommentTextIsNil() predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIsNull(FieldCommentText))
}

// CommentTextNotNil applies the NotNil predicate on the "comment_text" field.
func CommentTextNotNil() predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotNull(FieldCommentText))
}

// CommentTextEqualFold applies the EqualFold predicate on the "comment_text" field.
func CommentTextEqualFold(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEqualFold(FieldCommentText, v))
}

// CommentTextContainsFold applies the ContainsFold predicate on the "comment_text" field.
func CommentTextContainsFold(v string) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldContainsFold(FieldCommentText, v))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.VideoComment {
	return predicate.VideoComment(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VideoComment) predicate.VideoComment {
	return predicate.VideoComment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VideoComment) predicate.VideoComment {
	return predicate.VideoComment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VideoComment) predicate.VideoComment {
	return predicate.VideoComment(sql.NotPredicates(p))
}
