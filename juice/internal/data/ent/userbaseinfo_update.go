// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/internal/data/ent/predicate"
	"juice/internal/data/ent/userbaseinfo"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserBaseInfoUpdate is the builder for updating UserBaseInfo entities.
type UserBaseInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserBaseInfoMutation
}

// Where appends a list predicates to the UserBaseInfoUpdate builder.
func (ubiu *UserBaseInfoUpdate) Where(ps ...predicate.UserBaseInfo) *UserBaseInfoUpdate {
	ubiu.mutation.Where(ps...)
	return ubiu
}

// SetUserID sets the "user_id" field.
func (ubiu *UserBaseInfoUpdate) SetUserID(i int64) *UserBaseInfoUpdate {
	ubiu.mutation.ResetUserID()
	ubiu.mutation.SetUserID(i)
	return ubiu
}

// AddUserID adds i to the "user_id" field.
func (ubiu *UserBaseInfoUpdate) AddUserID(i int64) *UserBaseInfoUpdate {
	ubiu.mutation.AddUserID(i)
	return ubiu
}

// SetUsername sets the "username" field.
func (ubiu *UserBaseInfoUpdate) SetUsername(s string) *UserBaseInfoUpdate {
	ubiu.mutation.SetUsername(s)
	return ubiu
}

// SetSex sets the "sex" field.
func (ubiu *UserBaseInfoUpdate) SetSex(i int8) *UserBaseInfoUpdate {
	ubiu.mutation.ResetSex()
	ubiu.mutation.SetSex(i)
	return ubiu
}

// AddSex adds i to the "sex" field.
func (ubiu *UserBaseInfoUpdate) AddSex(i int8) *UserBaseInfoUpdate {
	ubiu.mutation.AddSex(i)
	return ubiu
}

// SetBirth sets the "birth" field.
func (ubiu *UserBaseInfoUpdate) SetBirth(t time.Time) *UserBaseInfoUpdate {
	ubiu.mutation.SetBirth(t)
	return ubiu
}

// SetNillableBirth sets the "birth" field if the given value is not nil.
func (ubiu *UserBaseInfoUpdate) SetNillableBirth(t *time.Time) *UserBaseInfoUpdate {
	if t != nil {
		ubiu.SetBirth(*t)
	}
	return ubiu
}

// SetArea sets the "area" field.
func (ubiu *UserBaseInfoUpdate) SetArea(i int32) *UserBaseInfoUpdate {
	ubiu.mutation.ResetArea()
	ubiu.mutation.SetArea(i)
	return ubiu
}

// AddArea adds i to the "area" field.
func (ubiu *UserBaseInfoUpdate) AddArea(i int32) *UserBaseInfoUpdate {
	ubiu.mutation.AddArea(i)
	return ubiu
}

// SetUserProfile sets the "user_profile" field.
func (ubiu *UserBaseInfoUpdate) SetUserProfile(s string) *UserBaseInfoUpdate {
	ubiu.mutation.SetUserProfile(s)
	return ubiu
}

// SetNillableUserProfile sets the "user_profile" field if the given value is not nil.
func (ubiu *UserBaseInfoUpdate) SetNillableUserProfile(s *string) *UserBaseInfoUpdate {
	if s != nil {
		ubiu.SetUserProfile(*s)
	}
	return ubiu
}

// ClearUserProfile clears the value of the "user_profile" field.
func (ubiu *UserBaseInfoUpdate) ClearUserProfile() *UserBaseInfoUpdate {
	ubiu.mutation.ClearUserProfile()
	return ubiu
}

// SetUserProfilePhotoURL sets the "user_profile_photo_url" field.
func (ubiu *UserBaseInfoUpdate) SetUserProfilePhotoURL(s string) *UserBaseInfoUpdate {
	ubiu.mutation.SetUserProfilePhotoURL(s)
	return ubiu
}

// SetNillableUserProfilePhotoURL sets the "user_profile_photo_url" field if the given value is not nil.
func (ubiu *UserBaseInfoUpdate) SetNillableUserProfilePhotoURL(s *string) *UserBaseInfoUpdate {
	if s != nil {
		ubiu.SetUserProfilePhotoURL(*s)
	}
	return ubiu
}

// ClearUserProfilePhotoURL clears the value of the "user_profile_photo_url" field.
func (ubiu *UserBaseInfoUpdate) ClearUserProfilePhotoURL() *UserBaseInfoUpdate {
	ubiu.mutation.ClearUserProfilePhotoURL()
	return ubiu
}

// SetFollowCount sets the "follow_count" field.
func (ubiu *UserBaseInfoUpdate) SetFollowCount(i int32) *UserBaseInfoUpdate {
	ubiu.mutation.ResetFollowCount()
	ubiu.mutation.SetFollowCount(i)
	return ubiu
}

// SetNillableFollowCount sets the "follow_count" field if the given value is not nil.
func (ubiu *UserBaseInfoUpdate) SetNillableFollowCount(i *int32) *UserBaseInfoUpdate {
	if i != nil {
		ubiu.SetFollowCount(*i)
	}
	return ubiu
}

// AddFollowCount adds i to the "follow_count" field.
func (ubiu *UserBaseInfoUpdate) AddFollowCount(i int32) *UserBaseInfoUpdate {
	ubiu.mutation.AddFollowCount(i)
	return ubiu
}

// SetFanCount sets the "fan_count" field.
func (ubiu *UserBaseInfoUpdate) SetFanCount(i int32) *UserBaseInfoUpdate {
	ubiu.mutation.ResetFanCount()
	ubiu.mutation.SetFanCount(i)
	return ubiu
}

// SetNillableFanCount sets the "fan_count" field if the given value is not nil.
func (ubiu *UserBaseInfoUpdate) SetNillableFanCount(i *int32) *UserBaseInfoUpdate {
	if i != nil {
		ubiu.SetFanCount(*i)
	}
	return ubiu
}

// AddFanCount adds i to the "fan_count" field.
func (ubiu *UserBaseInfoUpdate) AddFanCount(i int32) *UserBaseInfoUpdate {
	ubiu.mutation.AddFanCount(i)
	return ubiu
}

// SetCreateTime sets the "create_time" field.
func (ubiu *UserBaseInfoUpdate) SetCreateTime(t time.Time) *UserBaseInfoUpdate {
	ubiu.mutation.SetCreateTime(t)
	return ubiu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ubiu *UserBaseInfoUpdate) SetNillableCreateTime(t *time.Time) *UserBaseInfoUpdate {
	if t != nil {
		ubiu.SetCreateTime(*t)
	}
	return ubiu
}

// SetUpdateTime sets the "update_time" field.
func (ubiu *UserBaseInfoUpdate) SetUpdateTime(t time.Time) *UserBaseInfoUpdate {
	ubiu.mutation.SetUpdateTime(t)
	return ubiu
}

// Mutation returns the UserBaseInfoMutation object of the builder.
func (ubiu *UserBaseInfoUpdate) Mutation() *UserBaseInfoMutation {
	return ubiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ubiu *UserBaseInfoUpdate) Save(ctx context.Context) (int, error) {
	ubiu.defaults()
	return withHooks(ctx, ubiu.sqlSave, ubiu.mutation, ubiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubiu *UserBaseInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := ubiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ubiu *UserBaseInfoUpdate) Exec(ctx context.Context) error {
	_, err := ubiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubiu *UserBaseInfoUpdate) ExecX(ctx context.Context) {
	if err := ubiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubiu *UserBaseInfoUpdate) defaults() {
	if _, ok := ubiu.mutation.UpdateTime(); !ok {
		v := userbaseinfo.UpdateDefaultUpdateTime()
		ubiu.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubiu *UserBaseInfoUpdate) check() error {
	if v, ok := ubiu.mutation.UserID(); ok {
		if err := userbaseinfo.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserBaseInfo.user_id": %w`, err)}
		}
	}
	return nil
}

func (ubiu *UserBaseInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ubiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbaseinfo.Table, userbaseinfo.Columns, sqlgraph.NewFieldSpec(userbaseinfo.FieldID, field.TypeInt))
	if ps := ubiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubiu.mutation.UserID(); ok {
		_spec.SetField(userbaseinfo.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ubiu.mutation.AddedUserID(); ok {
		_spec.AddField(userbaseinfo.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ubiu.mutation.Username(); ok {
		_spec.SetField(userbaseinfo.FieldUsername, field.TypeString, value)
	}
	if value, ok := ubiu.mutation.Sex(); ok {
		_spec.SetField(userbaseinfo.FieldSex, field.TypeInt8, value)
	}
	if value, ok := ubiu.mutation.AddedSex(); ok {
		_spec.AddField(userbaseinfo.FieldSex, field.TypeInt8, value)
	}
	if value, ok := ubiu.mutation.Birth(); ok {
		_spec.SetField(userbaseinfo.FieldBirth, field.TypeTime, value)
	}
	if value, ok := ubiu.mutation.Area(); ok {
		_spec.SetField(userbaseinfo.FieldArea, field.TypeInt32, value)
	}
	if value, ok := ubiu.mutation.AddedArea(); ok {
		_spec.AddField(userbaseinfo.FieldArea, field.TypeInt32, value)
	}
	if value, ok := ubiu.mutation.UserProfile(); ok {
		_spec.SetField(userbaseinfo.FieldUserProfile, field.TypeString, value)
	}
	if ubiu.mutation.UserProfileCleared() {
		_spec.ClearField(userbaseinfo.FieldUserProfile, field.TypeString)
	}
	if value, ok := ubiu.mutation.UserProfilePhotoURL(); ok {
		_spec.SetField(userbaseinfo.FieldUserProfilePhotoURL, field.TypeString, value)
	}
	if ubiu.mutation.UserProfilePhotoURLCleared() {
		_spec.ClearField(userbaseinfo.FieldUserProfilePhotoURL, field.TypeString)
	}
	if value, ok := ubiu.mutation.FollowCount(); ok {
		_spec.SetField(userbaseinfo.FieldFollowCount, field.TypeInt32, value)
	}
	if value, ok := ubiu.mutation.AddedFollowCount(); ok {
		_spec.AddField(userbaseinfo.FieldFollowCount, field.TypeInt32, value)
	}
	if value, ok := ubiu.mutation.FanCount(); ok {
		_spec.SetField(userbaseinfo.FieldFanCount, field.TypeInt32, value)
	}
	if value, ok := ubiu.mutation.AddedFanCount(); ok {
		_spec.AddField(userbaseinfo.FieldFanCount, field.TypeInt32, value)
	}
	if value, ok := ubiu.mutation.CreateTime(); ok {
		_spec.SetField(userbaseinfo.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ubiu.mutation.UpdateTime(); ok {
		_spec.SetField(userbaseinfo.FieldUpdateTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ubiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbaseinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ubiu.mutation.done = true
	return n, nil
}

// UserBaseInfoUpdateOne is the builder for updating a single UserBaseInfo entity.
type UserBaseInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserBaseInfoMutation
}

// SetUserID sets the "user_id" field.
func (ubiuo *UserBaseInfoUpdateOne) SetUserID(i int64) *UserBaseInfoUpdateOne {
	ubiuo.mutation.ResetUserID()
	ubiuo.mutation.SetUserID(i)
	return ubiuo
}

// AddUserID adds i to the "user_id" field.
func (ubiuo *UserBaseInfoUpdateOne) AddUserID(i int64) *UserBaseInfoUpdateOne {
	ubiuo.mutation.AddUserID(i)
	return ubiuo
}

// SetUsername sets the "username" field.
func (ubiuo *UserBaseInfoUpdateOne) SetUsername(s string) *UserBaseInfoUpdateOne {
	ubiuo.mutation.SetUsername(s)
	return ubiuo
}

// SetSex sets the "sex" field.
func (ubiuo *UserBaseInfoUpdateOne) SetSex(i int8) *UserBaseInfoUpdateOne {
	ubiuo.mutation.ResetSex()
	ubiuo.mutation.SetSex(i)
	return ubiuo
}

// AddSex adds i to the "sex" field.
func (ubiuo *UserBaseInfoUpdateOne) AddSex(i int8) *UserBaseInfoUpdateOne {
	ubiuo.mutation.AddSex(i)
	return ubiuo
}

// SetBirth sets the "birth" field.
func (ubiuo *UserBaseInfoUpdateOne) SetBirth(t time.Time) *UserBaseInfoUpdateOne {
	ubiuo.mutation.SetBirth(t)
	return ubiuo
}

// SetNillableBirth sets the "birth" field if the given value is not nil.
func (ubiuo *UserBaseInfoUpdateOne) SetNillableBirth(t *time.Time) *UserBaseInfoUpdateOne {
	if t != nil {
		ubiuo.SetBirth(*t)
	}
	return ubiuo
}

// SetArea sets the "area" field.
func (ubiuo *UserBaseInfoUpdateOne) SetArea(i int32) *UserBaseInfoUpdateOne {
	ubiuo.mutation.ResetArea()
	ubiuo.mutation.SetArea(i)
	return ubiuo
}

// AddArea adds i to the "area" field.
func (ubiuo *UserBaseInfoUpdateOne) AddArea(i int32) *UserBaseInfoUpdateOne {
	ubiuo.mutation.AddArea(i)
	return ubiuo
}

// SetUserProfile sets the "user_profile" field.
func (ubiuo *UserBaseInfoUpdateOne) SetUserProfile(s string) *UserBaseInfoUpdateOne {
	ubiuo.mutation.SetUserProfile(s)
	return ubiuo
}

// SetNillableUserProfile sets the "user_profile" field if the given value is not nil.
func (ubiuo *UserBaseInfoUpdateOne) SetNillableUserProfile(s *string) *UserBaseInfoUpdateOne {
	if s != nil {
		ubiuo.SetUserProfile(*s)
	}
	return ubiuo
}

// ClearUserProfile clears the value of the "user_profile" field.
func (ubiuo *UserBaseInfoUpdateOne) ClearUserProfile() *UserBaseInfoUpdateOne {
	ubiuo.mutation.ClearUserProfile()
	return ubiuo
}

// SetUserProfilePhotoURL sets the "user_profile_photo_url" field.
func (ubiuo *UserBaseInfoUpdateOne) SetUserProfilePhotoURL(s string) *UserBaseInfoUpdateOne {
	ubiuo.mutation.SetUserProfilePhotoURL(s)
	return ubiuo
}

// SetNillableUserProfilePhotoURL sets the "user_profile_photo_url" field if the given value is not nil.
func (ubiuo *UserBaseInfoUpdateOne) SetNillableUserProfilePhotoURL(s *string) *UserBaseInfoUpdateOne {
	if s != nil {
		ubiuo.SetUserProfilePhotoURL(*s)
	}
	return ubiuo
}

// ClearUserProfilePhotoURL clears the value of the "user_profile_photo_url" field.
func (ubiuo *UserBaseInfoUpdateOne) ClearUserProfilePhotoURL() *UserBaseInfoUpdateOne {
	ubiuo.mutation.ClearUserProfilePhotoURL()
	return ubiuo
}

// SetFollowCount sets the "follow_count" field.
func (ubiuo *UserBaseInfoUpdateOne) SetFollowCount(i int32) *UserBaseInfoUpdateOne {
	ubiuo.mutation.ResetFollowCount()
	ubiuo.mutation.SetFollowCount(i)
	return ubiuo
}

// SetNillableFollowCount sets the "follow_count" field if the given value is not nil.
func (ubiuo *UserBaseInfoUpdateOne) SetNillableFollowCount(i *int32) *UserBaseInfoUpdateOne {
	if i != nil {
		ubiuo.SetFollowCount(*i)
	}
	return ubiuo
}

// AddFollowCount adds i to the "follow_count" field.
func (ubiuo *UserBaseInfoUpdateOne) AddFollowCount(i int32) *UserBaseInfoUpdateOne {
	ubiuo.mutation.AddFollowCount(i)
	return ubiuo
}

// SetFanCount sets the "fan_count" field.
func (ubiuo *UserBaseInfoUpdateOne) SetFanCount(i int32) *UserBaseInfoUpdateOne {
	ubiuo.mutation.ResetFanCount()
	ubiuo.mutation.SetFanCount(i)
	return ubiuo
}

// SetNillableFanCount sets the "fan_count" field if the given value is not nil.
func (ubiuo *UserBaseInfoUpdateOne) SetNillableFanCount(i *int32) *UserBaseInfoUpdateOne {
	if i != nil {
		ubiuo.SetFanCount(*i)
	}
	return ubiuo
}

// AddFanCount adds i to the "fan_count" field.
func (ubiuo *UserBaseInfoUpdateOne) AddFanCount(i int32) *UserBaseInfoUpdateOne {
	ubiuo.mutation.AddFanCount(i)
	return ubiuo
}

// SetCreateTime sets the "create_time" field.
func (ubiuo *UserBaseInfoUpdateOne) SetCreateTime(t time.Time) *UserBaseInfoUpdateOne {
	ubiuo.mutation.SetCreateTime(t)
	return ubiuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ubiuo *UserBaseInfoUpdateOne) SetNillableCreateTime(t *time.Time) *UserBaseInfoUpdateOne {
	if t != nil {
		ubiuo.SetCreateTime(*t)
	}
	return ubiuo
}

// SetUpdateTime sets the "update_time" field.
func (ubiuo *UserBaseInfoUpdateOne) SetUpdateTime(t time.Time) *UserBaseInfoUpdateOne {
	ubiuo.mutation.SetUpdateTime(t)
	return ubiuo
}

// Mutation returns the UserBaseInfoMutation object of the builder.
func (ubiuo *UserBaseInfoUpdateOne) Mutation() *UserBaseInfoMutation {
	return ubiuo.mutation
}

// Where appends a list predicates to the UserBaseInfoUpdate builder.
func (ubiuo *UserBaseInfoUpdateOne) Where(ps ...predicate.UserBaseInfo) *UserBaseInfoUpdateOne {
	ubiuo.mutation.Where(ps...)
	return ubiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ubiuo *UserBaseInfoUpdateOne) Select(field string, fields ...string) *UserBaseInfoUpdateOne {
	ubiuo.fields = append([]string{field}, fields...)
	return ubiuo
}

// Save executes the query and returns the updated UserBaseInfo entity.
func (ubiuo *UserBaseInfoUpdateOne) Save(ctx context.Context) (*UserBaseInfo, error) {
	ubiuo.defaults()
	return withHooks(ctx, ubiuo.sqlSave, ubiuo.mutation, ubiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ubiuo *UserBaseInfoUpdateOne) SaveX(ctx context.Context) *UserBaseInfo {
	node, err := ubiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ubiuo *UserBaseInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := ubiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ubiuo *UserBaseInfoUpdateOne) ExecX(ctx context.Context) {
	if err := ubiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ubiuo *UserBaseInfoUpdateOne) defaults() {
	if _, ok := ubiuo.mutation.UpdateTime(); !ok {
		v := userbaseinfo.UpdateDefaultUpdateTime()
		ubiuo.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ubiuo *UserBaseInfoUpdateOne) check() error {
	if v, ok := ubiuo.mutation.UserID(); ok {
		if err := userbaseinfo.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "UserBaseInfo.user_id": %w`, err)}
		}
	}
	return nil
}

func (ubiuo *UserBaseInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserBaseInfo, err error) {
	if err := ubiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userbaseinfo.Table, userbaseinfo.Columns, sqlgraph.NewFieldSpec(userbaseinfo.FieldID, field.TypeInt))
	id, ok := ubiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserBaseInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ubiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userbaseinfo.FieldID)
		for _, f := range fields {
			if !userbaseinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userbaseinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ubiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ubiuo.mutation.UserID(); ok {
		_spec.SetField(userbaseinfo.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ubiuo.mutation.AddedUserID(); ok {
		_spec.AddField(userbaseinfo.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := ubiuo.mutation.Username(); ok {
		_spec.SetField(userbaseinfo.FieldUsername, field.TypeString, value)
	}
	if value, ok := ubiuo.mutation.Sex(); ok {
		_spec.SetField(userbaseinfo.FieldSex, field.TypeInt8, value)
	}
	if value, ok := ubiuo.mutation.AddedSex(); ok {
		_spec.AddField(userbaseinfo.FieldSex, field.TypeInt8, value)
	}
	if value, ok := ubiuo.mutation.Birth(); ok {
		_spec.SetField(userbaseinfo.FieldBirth, field.TypeTime, value)
	}
	if value, ok := ubiuo.mutation.Area(); ok {
		_spec.SetField(userbaseinfo.FieldArea, field.TypeInt32, value)
	}
	if value, ok := ubiuo.mutation.AddedArea(); ok {
		_spec.AddField(userbaseinfo.FieldArea, field.TypeInt32, value)
	}
	if value, ok := ubiuo.mutation.UserProfile(); ok {
		_spec.SetField(userbaseinfo.FieldUserProfile, field.TypeString, value)
	}
	if ubiuo.mutation.UserProfileCleared() {
		_spec.ClearField(userbaseinfo.FieldUserProfile, field.TypeString)
	}
	if value, ok := ubiuo.mutation.UserProfilePhotoURL(); ok {
		_spec.SetField(userbaseinfo.FieldUserProfilePhotoURL, field.TypeString, value)
	}
	if ubiuo.mutation.UserProfilePhotoURLCleared() {
		_spec.ClearField(userbaseinfo.FieldUserProfilePhotoURL, field.TypeString)
	}
	if value, ok := ubiuo.mutation.FollowCount(); ok {
		_spec.SetField(userbaseinfo.FieldFollowCount, field.TypeInt32, value)
	}
	if value, ok := ubiuo.mutation.AddedFollowCount(); ok {
		_spec.AddField(userbaseinfo.FieldFollowCount, field.TypeInt32, value)
	}
	if value, ok := ubiuo.mutation.FanCount(); ok {
		_spec.SetField(userbaseinfo.FieldFanCount, field.TypeInt32, value)
	}
	if value, ok := ubiuo.mutation.AddedFanCount(); ok {
		_spec.AddField(userbaseinfo.FieldFanCount, field.TypeInt32, value)
	}
	if value, ok := ubiuo.mutation.CreateTime(); ok {
		_spec.SetField(userbaseinfo.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ubiuo.mutation.UpdateTime(); ok {
		_spec.SetField(userbaseinfo.FieldUpdateTime, field.TypeTime, value)
	}
	_node = &UserBaseInfo{config: ubiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ubiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userbaseinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ubiuo.mutation.done = true
	return _node, nil
}
