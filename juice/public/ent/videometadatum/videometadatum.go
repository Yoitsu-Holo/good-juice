// Code generated by ent, DO NOT EDIT.

package videometadatum

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the videometadatum type in the database.
	Label = "video_metadatum"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVideoID holds the string denoting the video_id field in the database.
	FieldVideoID = "video_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCoverURL holds the string denoting the cover_url field in the database.
	FieldCoverURL = "cover_url"
	// FieldVideoURL holds the string denoting the video_url field in the database.
	FieldVideoURL = "video_url"
	// FieldVideoIntro holds the string denoting the video_intro field in the database.
	FieldVideoIntro = "video_intro"
	// FieldVideoType holds the string denoting the video_type field in the database.
	FieldVideoType = "video_type"
	// FieldPublishAddress holds the string denoting the publish_address field in the database.
	FieldPublishAddress = "publish_address"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the videometadatum in the database.
	Table = "video_metadata"
)

// Columns holds all SQL columns for videometadatum fields.
var Columns = []string{
	FieldID,
	FieldVideoID,
	FieldUserID,
	FieldCoverURL,
	FieldVideoURL,
	FieldVideoIntro,
	FieldVideoType,
	FieldPublishAddress,
	FieldCreateTime,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the VideoMetadatum queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVideoID orders the results by the video_id field.
func ByVideoID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCoverURL orders the results by the cover_url field.
func ByCoverURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverURL, opts...).ToFunc()
}

// ByVideoURL orders the results by the video_url field.
func ByVideoURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoURL, opts...).ToFunc()
}

// ByVideoIntro orders the results by the video_intro field.
func ByVideoIntro(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoIntro, opts...).ToFunc()
}

// ByVideoType orders the results by the video_type field.
func ByVideoType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVideoType, opts...).ToFunc()
}

// ByPublishAddress orders the results by the publish_address field.
func ByPublishAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublishAddress, opts...).ToFunc()
}

// ByCreateTime orders the results by the create_time field.
func ByCreateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreateTime, opts...).ToFunc()
}

// ByUpdateTime orders the results by the update_time field.
func ByUpdateTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateTime, opts...).ToFunc()
}
