// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/public/ent/userpassword"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPasswordCreate is the builder for creating a UserPassword entity.
type UserPasswordCreate struct {
	config
	mutation *UserPasswordMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (upc *UserPasswordCreate) SetUserID(u uint64) *UserPasswordCreate {
	upc.mutation.SetUserID(u)
	return upc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableUserID(u *uint64) *UserPasswordCreate {
	if u != nil {
		upc.SetUserID(*u)
	}
	return upc
}

// SetSalt sets the "salt" field.
func (upc *UserPasswordCreate) SetSalt(s string) *UserPasswordCreate {
	upc.mutation.SetSalt(s)
	return upc
}

// SetPwd sets the "pwd" field.
func (upc *UserPasswordCreate) SetPwd(s string) *UserPasswordCreate {
	upc.mutation.SetPwd(s)
	return upc
}

// SetCreateTime sets the "create_time" field.
func (upc *UserPasswordCreate) SetCreateTime(t time.Time) *UserPasswordCreate {
	upc.mutation.SetCreateTime(t)
	return upc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableCreateTime(t *time.Time) *UserPasswordCreate {
	if t != nil {
		upc.SetCreateTime(*t)
	}
	return upc
}

// SetUpdateTime sets the "update_time" field.
func (upc *UserPasswordCreate) SetUpdateTime(t time.Time) *UserPasswordCreate {
	upc.mutation.SetUpdateTime(t)
	return upc
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (upc *UserPasswordCreate) SetNillableUpdateTime(t *time.Time) *UserPasswordCreate {
	if t != nil {
		upc.SetUpdateTime(*t)
	}
	return upc
}

// SetID sets the "id" field.
func (upc *UserPasswordCreate) SetID(i int) *UserPasswordCreate {
	upc.mutation.SetID(i)
	return upc
}

// Mutation returns the UserPasswordMutation object of the builder.
func (upc *UserPasswordCreate) Mutation() *UserPasswordMutation {
	return upc.mutation
}

// Save creates the UserPassword in the database.
func (upc *UserPasswordCreate) Save(ctx context.Context) (*UserPassword, error) {
	return withHooks(ctx, upc.sqlSave, upc.mutation, upc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (upc *UserPasswordCreate) SaveX(ctx context.Context) *UserPassword {
	v, err := upc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upc *UserPasswordCreate) Exec(ctx context.Context) error {
	_, err := upc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upc *UserPasswordCreate) ExecX(ctx context.Context) {
	if err := upc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (upc *UserPasswordCreate) check() error {
	if _, ok := upc.mutation.Salt(); !ok {
		return &ValidationError{Name: "salt", err: errors.New(`ent: missing required field "UserPassword.salt"`)}
	}
	if _, ok := upc.mutation.Pwd(); !ok {
		return &ValidationError{Name: "pwd", err: errors.New(`ent: missing required field "UserPassword.pwd"`)}
	}
	return nil
}

func (upc *UserPasswordCreate) sqlSave(ctx context.Context) (*UserPassword, error) {
	if err := upc.check(); err != nil {
		return nil, err
	}
	_node, _spec := upc.createSpec()
	if err := sqlgraph.CreateNode(ctx, upc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	upc.mutation.id = &_node.ID
	upc.mutation.done = true
	return _node, nil
}

func (upc *UserPasswordCreate) createSpec() (*UserPassword, *sqlgraph.CreateSpec) {
	var (
		_node = &UserPassword{config: upc.config}
		_spec = sqlgraph.NewCreateSpec(userpassword.Table, sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeInt))
	)
	if id, ok := upc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := upc.mutation.UserID(); ok {
		_spec.SetField(userpassword.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := upc.mutation.Salt(); ok {
		_spec.SetField(userpassword.FieldSalt, field.TypeString, value)
		_node.Salt = value
	}
	if value, ok := upc.mutation.Pwd(); ok {
		_spec.SetField(userpassword.FieldPwd, field.TypeString, value)
		_node.Pwd = value
	}
	if value, ok := upc.mutation.CreateTime(); ok {
		_spec.SetField(userpassword.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := upc.mutation.UpdateTime(); ok {
		_spec.SetField(userpassword.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// UserPasswordCreateBulk is the builder for creating many UserPassword entities in bulk.
type UserPasswordCreateBulk struct {
	config
	err      error
	builders []*UserPasswordCreate
}

// Save creates the UserPassword entities in the database.
func (upcb *UserPasswordCreateBulk) Save(ctx context.Context) ([]*UserPassword, error) {
	if upcb.err != nil {
		return nil, upcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(upcb.builders))
	nodes := make([]*UserPassword, len(upcb.builders))
	mutators := make([]Mutator, len(upcb.builders))
	for i := range upcb.builders {
		func(i int, root context.Context) {
			builder := upcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserPasswordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, upcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, upcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, upcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (upcb *UserPasswordCreateBulk) SaveX(ctx context.Context) []*UserPassword {
	v, err := upcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (upcb *UserPasswordCreateBulk) Exec(ctx context.Context) error {
	_, err := upcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upcb *UserPasswordCreateBulk) ExecX(ctx context.Context) {
	if err := upcb.Exec(ctx); err != nil {
		panic(err)
	}
}
