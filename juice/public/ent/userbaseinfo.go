// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"juice/public/ent/userbaseinfo"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// UserBaseInfo is the model entity for the UserBaseInfo schema.
type UserBaseInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Sex holds the value of the "sex" field.
	Sex int8 `json:"sex,omitempty"`
	// Birth holds the value of the "birth" field.
	Birth time.Time `json:"birth,omitempty"`
	// Area holds the value of the "area" field.
	Area int32 `json:"area,omitempty"`
	// UserProfile holds the value of the "user_profile" field.
	UserProfile string `json:"user_profile,omitempty"`
	// UserProfilePhotoURL holds the value of the "user_profile_photo_url" field.
	UserProfilePhotoURL string `json:"user_profile_photo_url,omitempty"`
	// FollowCount holds the value of the "follow_count" field.
	FollowCount int32 `json:"follow_count,omitempty"`
	// FanCount holds the value of the "fan_count" field.
	FanCount int32 `json:"fan_count,omitempty"`
	// CreateTime holds the value of the "create_time" field.
	CreateTime time.Time `json:"create_time,omitempty"`
	// UpdateTime holds the value of the "update_time" field.
	UpdateTime   time.Time `json:"update_time,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserBaseInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case userbaseinfo.FieldID, userbaseinfo.FieldUserID, userbaseinfo.FieldSex, userbaseinfo.FieldArea, userbaseinfo.FieldFollowCount, userbaseinfo.FieldFanCount:
			values[i] = new(sql.NullInt64)
		case userbaseinfo.FieldUsername, userbaseinfo.FieldUserProfile, userbaseinfo.FieldUserProfilePhotoURL:
			values[i] = new(sql.NullString)
		case userbaseinfo.FieldBirth, userbaseinfo.FieldCreateTime, userbaseinfo.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserBaseInfo fields.
func (ubi *UserBaseInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case userbaseinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ubi.ID = uint64(value.Int64)
		case userbaseinfo.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ubi.UserID = uint64(value.Int64)
			}
		case userbaseinfo.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				ubi.Username = value.String
			}
		case userbaseinfo.FieldSex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sex", values[i])
			} else if value.Valid {
				ubi.Sex = int8(value.Int64)
			}
		case userbaseinfo.FieldBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birth", values[i])
			} else if value.Valid {
				ubi.Birth = value.Time
			}
		case userbaseinfo.FieldArea:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field area", values[i])
			} else if value.Valid {
				ubi.Area = int32(value.Int64)
			}
		case userbaseinfo.FieldUserProfile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_profile", values[i])
			} else if value.Valid {
				ubi.UserProfile = value.String
			}
		case userbaseinfo.FieldUserProfilePhotoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_profile_photo_url", values[i])
			} else if value.Valid {
				ubi.UserProfilePhotoURL = value.String
			}
		case userbaseinfo.FieldFollowCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field follow_count", values[i])
			} else if value.Valid {
				ubi.FollowCount = int32(value.Int64)
			}
		case userbaseinfo.FieldFanCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fan_count", values[i])
			} else if value.Valid {
				ubi.FanCount = int32(value.Int64)
			}
		case userbaseinfo.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				ubi.CreateTime = value.Time
			}
		case userbaseinfo.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				ubi.UpdateTime = value.Time
			}
		default:
			ubi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UserBaseInfo.
// This includes values selected through modifiers, order, etc.
func (ubi *UserBaseInfo) Value(name string) (ent.Value, error) {
	return ubi.selectValues.Get(name)
}

// Update returns a builder for updating this UserBaseInfo.
// Note that you need to call UserBaseInfo.Unwrap() before calling this method if this UserBaseInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ubi *UserBaseInfo) Update() *UserBaseInfoUpdateOne {
	return NewUserBaseInfoClient(ubi.config).UpdateOne(ubi)
}

// Unwrap unwraps the UserBaseInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ubi *UserBaseInfo) Unwrap() *UserBaseInfo {
	_tx, ok := ubi.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserBaseInfo is not a transactional entity")
	}
	ubi.config.driver = _tx.drv
	return ubi
}

// String implements the fmt.Stringer.
func (ubi *UserBaseInfo) String() string {
	var builder strings.Builder
	builder.WriteString("UserBaseInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ubi.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ubi.UserID))
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(ubi.Username)
	builder.WriteString(", ")
	builder.WriteString("sex=")
	builder.WriteString(fmt.Sprintf("%v", ubi.Sex))
	builder.WriteString(", ")
	builder.WriteString("birth=")
	builder.WriteString(ubi.Birth.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("area=")
	builder.WriteString(fmt.Sprintf("%v", ubi.Area))
	builder.WriteString(", ")
	builder.WriteString("user_profile=")
	builder.WriteString(ubi.UserProfile)
	builder.WriteString(", ")
	builder.WriteString("user_profile_photo_url=")
	builder.WriteString(ubi.UserProfilePhotoURL)
	builder.WriteString(", ")
	builder.WriteString("follow_count=")
	builder.WriteString(fmt.Sprintf("%v", ubi.FollowCount))
	builder.WriteString(", ")
	builder.WriteString("fan_count=")
	builder.WriteString(fmt.Sprintf("%v", ubi.FanCount))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(ubi.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(ubi.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// UserBaseInfos is a parsable slice of UserBaseInfo.
type UserBaseInfos []*UserBaseInfo
