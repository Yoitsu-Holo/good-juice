// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/public/data/ent/predicate"
	"juice/public/data/ent/userpassword"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserPasswordUpdate is the builder for updating UserPassword entities.
type UserPasswordUpdate struct {
	config
	hooks    []Hook
	mutation *UserPasswordMutation
}

// Where appends a list predicates to the UserPasswordUpdate builder.
func (upu *UserPasswordUpdate) Where(ps ...predicate.UserPassword) *UserPasswordUpdate {
	upu.mutation.Where(ps...)
	return upu
}

// SetUserID sets the "user_id" field.
func (upu *UserPasswordUpdate) SetUserID(u uint64) *UserPasswordUpdate {
	upu.mutation.ResetUserID()
	upu.mutation.SetUserID(u)
	return upu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upu *UserPasswordUpdate) SetNillableUserID(u *uint64) *UserPasswordUpdate {
	if u != nil {
		upu.SetUserID(*u)
	}
	return upu
}

// AddUserID adds u to the "user_id" field.
func (upu *UserPasswordUpdate) AddUserID(u int64) *UserPasswordUpdate {
	upu.mutation.AddUserID(u)
	return upu
}

// ClearUserID clears the value of the "user_id" field.
func (upu *UserPasswordUpdate) ClearUserID() *UserPasswordUpdate {
	upu.mutation.ClearUserID()
	return upu
}

// SetSalt sets the "salt" field.
func (upu *UserPasswordUpdate) SetSalt(s string) *UserPasswordUpdate {
	upu.mutation.SetSalt(s)
	return upu
}

// SetPwd sets the "pwd" field.
func (upu *UserPasswordUpdate) SetPwd(s string) *UserPasswordUpdate {
	upu.mutation.SetPwd(s)
	return upu
}

// SetCreateTime sets the "create_time" field.
func (upu *UserPasswordUpdate) SetCreateTime(t time.Time) *UserPasswordUpdate {
	upu.mutation.SetCreateTime(t)
	return upu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (upu *UserPasswordUpdate) SetNillableCreateTime(t *time.Time) *UserPasswordUpdate {
	if t != nil {
		upu.SetCreateTime(*t)
	}
	return upu
}

// ClearCreateTime clears the value of the "create_time" field.
func (upu *UserPasswordUpdate) ClearCreateTime() *UserPasswordUpdate {
	upu.mutation.ClearCreateTime()
	return upu
}

// SetUpdateTime sets the "update_time" field.
func (upu *UserPasswordUpdate) SetUpdateTime(t time.Time) *UserPasswordUpdate {
	upu.mutation.SetUpdateTime(t)
	return upu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (upu *UserPasswordUpdate) SetNillableUpdateTime(t *time.Time) *UserPasswordUpdate {
	if t != nil {
		upu.SetUpdateTime(*t)
	}
	return upu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (upu *UserPasswordUpdate) ClearUpdateTime() *UserPasswordUpdate {
	upu.mutation.ClearUpdateTime()
	return upu
}

// Mutation returns the UserPasswordMutation object of the builder.
func (upu *UserPasswordUpdate) Mutation() *UserPasswordMutation {
	return upu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (upu *UserPasswordUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, upu.sqlSave, upu.mutation, upu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upu *UserPasswordUpdate) SaveX(ctx context.Context) int {
	affected, err := upu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (upu *UserPasswordUpdate) Exec(ctx context.Context) error {
	_, err := upu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upu *UserPasswordUpdate) ExecX(ctx context.Context) {
	if err := upu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upu *UserPasswordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(userpassword.Table, userpassword.Columns, sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeUint64))
	if ps := upu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upu.mutation.UserID(); ok {
		_spec.SetField(userpassword.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := upu.mutation.AddedUserID(); ok {
		_spec.AddField(userpassword.FieldUserID, field.TypeUint64, value)
	}
	if upu.mutation.UserIDCleared() {
		_spec.ClearField(userpassword.FieldUserID, field.TypeUint64)
	}
	if value, ok := upu.mutation.Salt(); ok {
		_spec.SetField(userpassword.FieldSalt, field.TypeString, value)
	}
	if value, ok := upu.mutation.Pwd(); ok {
		_spec.SetField(userpassword.FieldPwd, field.TypeString, value)
	}
	if value, ok := upu.mutation.CreateTime(); ok {
		_spec.SetField(userpassword.FieldCreateTime, field.TypeTime, value)
	}
	if upu.mutation.CreateTimeCleared() {
		_spec.ClearField(userpassword.FieldCreateTime, field.TypeTime)
	}
	if value, ok := upu.mutation.UpdateTime(); ok {
		_spec.SetField(userpassword.FieldUpdateTime, field.TypeTime, value)
	}
	if upu.mutation.UpdateTimeCleared() {
		_spec.ClearField(userpassword.FieldUpdateTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, upu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	upu.mutation.done = true
	return n, nil
}

// UserPasswordUpdateOne is the builder for updating a single UserPassword entity.
type UserPasswordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserPasswordMutation
}

// SetUserID sets the "user_id" field.
func (upuo *UserPasswordUpdateOne) SetUserID(u uint64) *UserPasswordUpdateOne {
	upuo.mutation.ResetUserID()
	upuo.mutation.SetUserID(u)
	return upuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (upuo *UserPasswordUpdateOne) SetNillableUserID(u *uint64) *UserPasswordUpdateOne {
	if u != nil {
		upuo.SetUserID(*u)
	}
	return upuo
}

// AddUserID adds u to the "user_id" field.
func (upuo *UserPasswordUpdateOne) AddUserID(u int64) *UserPasswordUpdateOne {
	upuo.mutation.AddUserID(u)
	return upuo
}

// ClearUserID clears the value of the "user_id" field.
func (upuo *UserPasswordUpdateOne) ClearUserID() *UserPasswordUpdateOne {
	upuo.mutation.ClearUserID()
	return upuo
}

// SetSalt sets the "salt" field.
func (upuo *UserPasswordUpdateOne) SetSalt(s string) *UserPasswordUpdateOne {
	upuo.mutation.SetSalt(s)
	return upuo
}

// SetPwd sets the "pwd" field.
func (upuo *UserPasswordUpdateOne) SetPwd(s string) *UserPasswordUpdateOne {
	upuo.mutation.SetPwd(s)
	return upuo
}

// SetCreateTime sets the "create_time" field.
func (upuo *UserPasswordUpdateOne) SetCreateTime(t time.Time) *UserPasswordUpdateOne {
	upuo.mutation.SetCreateTime(t)
	return upuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (upuo *UserPasswordUpdateOne) SetNillableCreateTime(t *time.Time) *UserPasswordUpdateOne {
	if t != nil {
		upuo.SetCreateTime(*t)
	}
	return upuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (upuo *UserPasswordUpdateOne) ClearCreateTime() *UserPasswordUpdateOne {
	upuo.mutation.ClearCreateTime()
	return upuo
}

// SetUpdateTime sets the "update_time" field.
func (upuo *UserPasswordUpdateOne) SetUpdateTime(t time.Time) *UserPasswordUpdateOne {
	upuo.mutation.SetUpdateTime(t)
	return upuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (upuo *UserPasswordUpdateOne) SetNillableUpdateTime(t *time.Time) *UserPasswordUpdateOne {
	if t != nil {
		upuo.SetUpdateTime(*t)
	}
	return upuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (upuo *UserPasswordUpdateOne) ClearUpdateTime() *UserPasswordUpdateOne {
	upuo.mutation.ClearUpdateTime()
	return upuo
}

// Mutation returns the UserPasswordMutation object of the builder.
func (upuo *UserPasswordUpdateOne) Mutation() *UserPasswordMutation {
	return upuo.mutation
}

// Where appends a list predicates to the UserPasswordUpdate builder.
func (upuo *UserPasswordUpdateOne) Where(ps ...predicate.UserPassword) *UserPasswordUpdateOne {
	upuo.mutation.Where(ps...)
	return upuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (upuo *UserPasswordUpdateOne) Select(field string, fields ...string) *UserPasswordUpdateOne {
	upuo.fields = append([]string{field}, fields...)
	return upuo
}

// Save executes the query and returns the updated UserPassword entity.
func (upuo *UserPasswordUpdateOne) Save(ctx context.Context) (*UserPassword, error) {
	return withHooks(ctx, upuo.sqlSave, upuo.mutation, upuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (upuo *UserPasswordUpdateOne) SaveX(ctx context.Context) *UserPassword {
	node, err := upuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (upuo *UserPasswordUpdateOne) Exec(ctx context.Context) error {
	_, err := upuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (upuo *UserPasswordUpdateOne) ExecX(ctx context.Context) {
	if err := upuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (upuo *UserPasswordUpdateOne) sqlSave(ctx context.Context) (_node *UserPassword, err error) {
	_spec := sqlgraph.NewUpdateSpec(userpassword.Table, userpassword.Columns, sqlgraph.NewFieldSpec(userpassword.FieldID, field.TypeUint64))
	id, ok := upuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserPassword.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := upuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userpassword.FieldID)
		for _, f := range fields {
			if !userpassword.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userpassword.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := upuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := upuo.mutation.UserID(); ok {
		_spec.SetField(userpassword.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := upuo.mutation.AddedUserID(); ok {
		_spec.AddField(userpassword.FieldUserID, field.TypeUint64, value)
	}
	if upuo.mutation.UserIDCleared() {
		_spec.ClearField(userpassword.FieldUserID, field.TypeUint64)
	}
	if value, ok := upuo.mutation.Salt(); ok {
		_spec.SetField(userpassword.FieldSalt, field.TypeString, value)
	}
	if value, ok := upuo.mutation.Pwd(); ok {
		_spec.SetField(userpassword.FieldPwd, field.TypeString, value)
	}
	if value, ok := upuo.mutation.CreateTime(); ok {
		_spec.SetField(userpassword.FieldCreateTime, field.TypeTime, value)
	}
	if upuo.mutation.CreateTimeCleared() {
		_spec.ClearField(userpassword.FieldCreateTime, field.TypeTime)
	}
	if value, ok := upuo.mutation.UpdateTime(); ok {
		_spec.SetField(userpassword.FieldUpdateTime, field.TypeTime, value)
	}
	if upuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(userpassword.FieldUpdateTime, field.TypeTime)
	}
	_node = &UserPassword{config: upuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, upuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userpassword.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	upuo.mutation.done = true
	return _node, nil
}
