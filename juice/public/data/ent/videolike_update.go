// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/public/data/ent/predicate"
	"juice/public/data/ent/videolike"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoLikeUpdate is the builder for updating VideoLike entities.
type VideoLikeUpdate struct {
	config
	hooks    []Hook
	mutation *VideoLikeMutation
}

// Where appends a list predicates to the VideoLikeUpdate builder.
func (vlu *VideoLikeUpdate) Where(ps ...predicate.VideoLike) *VideoLikeUpdate {
	vlu.mutation.Where(ps...)
	return vlu
}

// SetUserID sets the "user_id" field.
func (vlu *VideoLikeUpdate) SetUserID(i int) *VideoLikeUpdate {
	vlu.mutation.ResetUserID()
	vlu.mutation.SetUserID(i)
	return vlu
}

// AddUserID adds i to the "user_id" field.
func (vlu *VideoLikeUpdate) AddUserID(i int) *VideoLikeUpdate {
	vlu.mutation.AddUserID(i)
	return vlu
}

// SetVideoID sets the "video_id" field.
func (vlu *VideoLikeUpdate) SetVideoID(i int) *VideoLikeUpdate {
	vlu.mutation.ResetVideoID()
	vlu.mutation.SetVideoID(i)
	return vlu
}

// AddVideoID adds i to the "video_id" field.
func (vlu *VideoLikeUpdate) AddVideoID(i int) *VideoLikeUpdate {
	vlu.mutation.AddVideoID(i)
	return vlu
}

// SetStatus sets the "status" field.
func (vlu *VideoLikeUpdate) SetStatus(i int8) *VideoLikeUpdate {
	vlu.mutation.ResetStatus()
	vlu.mutation.SetStatus(i)
	return vlu
}

// AddStatus adds i to the "status" field.
func (vlu *VideoLikeUpdate) AddStatus(i int8) *VideoLikeUpdate {
	vlu.mutation.AddStatus(i)
	return vlu
}

// SetCreateTime sets the "create_time" field.
func (vlu *VideoLikeUpdate) SetCreateTime(t time.Time) *VideoLikeUpdate {
	vlu.mutation.SetCreateTime(t)
	return vlu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vlu *VideoLikeUpdate) SetNillableCreateTime(t *time.Time) *VideoLikeUpdate {
	if t != nil {
		vlu.SetCreateTime(*t)
	}
	return vlu
}

// ClearCreateTime clears the value of the "create_time" field.
func (vlu *VideoLikeUpdate) ClearCreateTime() *VideoLikeUpdate {
	vlu.mutation.ClearCreateTime()
	return vlu
}

// SetUpdateTime sets the "update_time" field.
func (vlu *VideoLikeUpdate) SetUpdateTime(t time.Time) *VideoLikeUpdate {
	vlu.mutation.SetUpdateTime(t)
	return vlu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vlu *VideoLikeUpdate) SetNillableUpdateTime(t *time.Time) *VideoLikeUpdate {
	if t != nil {
		vlu.SetUpdateTime(*t)
	}
	return vlu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (vlu *VideoLikeUpdate) ClearUpdateTime() *VideoLikeUpdate {
	vlu.mutation.ClearUpdateTime()
	return vlu
}

// Mutation returns the VideoLikeMutation object of the builder.
func (vlu *VideoLikeUpdate) Mutation() *VideoLikeMutation {
	return vlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vlu *VideoLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vlu.sqlSave, vlu.mutation, vlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vlu *VideoLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := vlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vlu *VideoLikeUpdate) Exec(ctx context.Context) error {
	_, err := vlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vlu *VideoLikeUpdate) ExecX(ctx context.Context) {
	if err := vlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vlu *VideoLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(videolike.Table, videolike.Columns, sqlgraph.NewFieldSpec(videolike.FieldID, field.TypeUint64))
	if ps := vlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vlu.mutation.UserID(); ok {
		_spec.SetField(videolike.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vlu.mutation.AddedUserID(); ok {
		_spec.AddField(videolike.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vlu.mutation.VideoID(); ok {
		_spec.SetField(videolike.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vlu.mutation.AddedVideoID(); ok {
		_spec.AddField(videolike.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vlu.mutation.Status(); ok {
		_spec.SetField(videolike.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vlu.mutation.AddedStatus(); ok {
		_spec.AddField(videolike.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vlu.mutation.CreateTime(); ok {
		_spec.SetField(videolike.FieldCreateTime, field.TypeTime, value)
	}
	if vlu.mutation.CreateTimeCleared() {
		_spec.ClearField(videolike.FieldCreateTime, field.TypeTime)
	}
	if value, ok := vlu.mutation.UpdateTime(); ok {
		_spec.SetField(videolike.FieldUpdateTime, field.TypeTime, value)
	}
	if vlu.mutation.UpdateTimeCleared() {
		_spec.ClearField(videolike.FieldUpdateTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videolike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vlu.mutation.done = true
	return n, nil
}

// VideoLikeUpdateOne is the builder for updating a single VideoLike entity.
type VideoLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoLikeMutation
}

// SetUserID sets the "user_id" field.
func (vluo *VideoLikeUpdateOne) SetUserID(i int) *VideoLikeUpdateOne {
	vluo.mutation.ResetUserID()
	vluo.mutation.SetUserID(i)
	return vluo
}

// AddUserID adds i to the "user_id" field.
func (vluo *VideoLikeUpdateOne) AddUserID(i int) *VideoLikeUpdateOne {
	vluo.mutation.AddUserID(i)
	return vluo
}

// SetVideoID sets the "video_id" field.
func (vluo *VideoLikeUpdateOne) SetVideoID(i int) *VideoLikeUpdateOne {
	vluo.mutation.ResetVideoID()
	vluo.mutation.SetVideoID(i)
	return vluo
}

// AddVideoID adds i to the "video_id" field.
func (vluo *VideoLikeUpdateOne) AddVideoID(i int) *VideoLikeUpdateOne {
	vluo.mutation.AddVideoID(i)
	return vluo
}

// SetStatus sets the "status" field.
func (vluo *VideoLikeUpdateOne) SetStatus(i int8) *VideoLikeUpdateOne {
	vluo.mutation.ResetStatus()
	vluo.mutation.SetStatus(i)
	return vluo
}

// AddStatus adds i to the "status" field.
func (vluo *VideoLikeUpdateOne) AddStatus(i int8) *VideoLikeUpdateOne {
	vluo.mutation.AddStatus(i)
	return vluo
}

// SetCreateTime sets the "create_time" field.
func (vluo *VideoLikeUpdateOne) SetCreateTime(t time.Time) *VideoLikeUpdateOne {
	vluo.mutation.SetCreateTime(t)
	return vluo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vluo *VideoLikeUpdateOne) SetNillableCreateTime(t *time.Time) *VideoLikeUpdateOne {
	if t != nil {
		vluo.SetCreateTime(*t)
	}
	return vluo
}

// ClearCreateTime clears the value of the "create_time" field.
func (vluo *VideoLikeUpdateOne) ClearCreateTime() *VideoLikeUpdateOne {
	vluo.mutation.ClearCreateTime()
	return vluo
}

// SetUpdateTime sets the "update_time" field.
func (vluo *VideoLikeUpdateOne) SetUpdateTime(t time.Time) *VideoLikeUpdateOne {
	vluo.mutation.SetUpdateTime(t)
	return vluo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vluo *VideoLikeUpdateOne) SetNillableUpdateTime(t *time.Time) *VideoLikeUpdateOne {
	if t != nil {
		vluo.SetUpdateTime(*t)
	}
	return vluo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (vluo *VideoLikeUpdateOne) ClearUpdateTime() *VideoLikeUpdateOne {
	vluo.mutation.ClearUpdateTime()
	return vluo
}

// Mutation returns the VideoLikeMutation object of the builder.
func (vluo *VideoLikeUpdateOne) Mutation() *VideoLikeMutation {
	return vluo.mutation
}

// Where appends a list predicates to the VideoLikeUpdate builder.
func (vluo *VideoLikeUpdateOne) Where(ps ...predicate.VideoLike) *VideoLikeUpdateOne {
	vluo.mutation.Where(ps...)
	return vluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vluo *VideoLikeUpdateOne) Select(field string, fields ...string) *VideoLikeUpdateOne {
	vluo.fields = append([]string{field}, fields...)
	return vluo
}

// Save executes the query and returns the updated VideoLike entity.
func (vluo *VideoLikeUpdateOne) Save(ctx context.Context) (*VideoLike, error) {
	return withHooks(ctx, vluo.sqlSave, vluo.mutation, vluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vluo *VideoLikeUpdateOne) SaveX(ctx context.Context) *VideoLike {
	node, err := vluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vluo *VideoLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := vluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vluo *VideoLikeUpdateOne) ExecX(ctx context.Context) {
	if err := vluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vluo *VideoLikeUpdateOne) sqlSave(ctx context.Context) (_node *VideoLike, err error) {
	_spec := sqlgraph.NewUpdateSpec(videolike.Table, videolike.Columns, sqlgraph.NewFieldSpec(videolike.FieldID, field.TypeUint64))
	id, ok := vluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoLike.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videolike.FieldID)
		for _, f := range fields {
			if !videolike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videolike.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vluo.mutation.UserID(); ok {
		_spec.SetField(videolike.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vluo.mutation.AddedUserID(); ok {
		_spec.AddField(videolike.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vluo.mutation.VideoID(); ok {
		_spec.SetField(videolike.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vluo.mutation.AddedVideoID(); ok {
		_spec.AddField(videolike.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vluo.mutation.Status(); ok {
		_spec.SetField(videolike.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vluo.mutation.AddedStatus(); ok {
		_spec.AddField(videolike.FieldStatus, field.TypeInt8, value)
	}
	if value, ok := vluo.mutation.CreateTime(); ok {
		_spec.SetField(videolike.FieldCreateTime, field.TypeTime, value)
	}
	if vluo.mutation.CreateTimeCleared() {
		_spec.ClearField(videolike.FieldCreateTime, field.TypeTime)
	}
	if value, ok := vluo.mutation.UpdateTime(); ok {
		_spec.SetField(videolike.FieldUpdateTime, field.TypeTime, value)
	}
	if vluo.mutation.UpdateTimeCleared() {
		_spec.ClearField(videolike.FieldUpdateTime, field.TypeTime)
	}
	_node = &VideoLike{config: vluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videolike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vluo.mutation.done = true
	return _node, nil
}
