// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"juice/public/data/ent/predicate"
	"juice/public/data/ent/videometadatum"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// VideoMetadatumUpdate is the builder for updating VideoMetadatum entities.
type VideoMetadatumUpdate struct {
	config
	hooks    []Hook
	mutation *VideoMetadatumMutation
}

// Where appends a list predicates to the VideoMetadatumUpdate builder.
func (vmu *VideoMetadatumUpdate) Where(ps ...predicate.VideoMetadatum) *VideoMetadatumUpdate {
	vmu.mutation.Where(ps...)
	return vmu
}

// SetVideoID sets the "video_id" field.
func (vmu *VideoMetadatumUpdate) SetVideoID(i int) *VideoMetadatumUpdate {
	vmu.mutation.ResetVideoID()
	vmu.mutation.SetVideoID(i)
	return vmu
}

// AddVideoID adds i to the "video_id" field.
func (vmu *VideoMetadatumUpdate) AddVideoID(i int) *VideoMetadatumUpdate {
	vmu.mutation.AddVideoID(i)
	return vmu
}

// SetUserID sets the "user_id" field.
func (vmu *VideoMetadatumUpdate) SetUserID(i int) *VideoMetadatumUpdate {
	vmu.mutation.ResetUserID()
	vmu.mutation.SetUserID(i)
	return vmu
}

// AddUserID adds i to the "user_id" field.
func (vmu *VideoMetadatumUpdate) AddUserID(i int) *VideoMetadatumUpdate {
	vmu.mutation.AddUserID(i)
	return vmu
}

// SetCoverURL sets the "cover_url" field.
func (vmu *VideoMetadatumUpdate) SetCoverURL(s string) *VideoMetadatumUpdate {
	vmu.mutation.SetCoverURL(s)
	return vmu
}

// SetVideoURL sets the "video_url" field.
func (vmu *VideoMetadatumUpdate) SetVideoURL(s string) *VideoMetadatumUpdate {
	vmu.mutation.SetVideoURL(s)
	return vmu
}

// SetVideoIntro sets the "video_intro" field.
func (vmu *VideoMetadatumUpdate) SetVideoIntro(s string) *VideoMetadatumUpdate {
	vmu.mutation.SetVideoIntro(s)
	return vmu
}

// SetNillableVideoIntro sets the "video_intro" field if the given value is not nil.
func (vmu *VideoMetadatumUpdate) SetNillableVideoIntro(s *string) *VideoMetadatumUpdate {
	if s != nil {
		vmu.SetVideoIntro(*s)
	}
	return vmu
}

// ClearVideoIntro clears the value of the "video_intro" field.
func (vmu *VideoMetadatumUpdate) ClearVideoIntro() *VideoMetadatumUpdate {
	vmu.mutation.ClearVideoIntro()
	return vmu
}

// SetVideoType sets the "video_type" field.
func (vmu *VideoMetadatumUpdate) SetVideoType(i int) *VideoMetadatumUpdate {
	vmu.mutation.ResetVideoType()
	vmu.mutation.SetVideoType(i)
	return vmu
}

// AddVideoType adds i to the "video_type" field.
func (vmu *VideoMetadatumUpdate) AddVideoType(i int) *VideoMetadatumUpdate {
	vmu.mutation.AddVideoType(i)
	return vmu
}

// SetPublishAddress sets the "publish_address" field.
func (vmu *VideoMetadatumUpdate) SetPublishAddress(i int32) *VideoMetadatumUpdate {
	vmu.mutation.ResetPublishAddress()
	vmu.mutation.SetPublishAddress(i)
	return vmu
}

// AddPublishAddress adds i to the "publish_address" field.
func (vmu *VideoMetadatumUpdate) AddPublishAddress(i int32) *VideoMetadatumUpdate {
	vmu.mutation.AddPublishAddress(i)
	return vmu
}

// SetCreateTime sets the "create_time" field.
func (vmu *VideoMetadatumUpdate) SetCreateTime(t time.Time) *VideoMetadatumUpdate {
	vmu.mutation.SetCreateTime(t)
	return vmu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vmu *VideoMetadatumUpdate) SetNillableCreateTime(t *time.Time) *VideoMetadatumUpdate {
	if t != nil {
		vmu.SetCreateTime(*t)
	}
	return vmu
}

// ClearCreateTime clears the value of the "create_time" field.
func (vmu *VideoMetadatumUpdate) ClearCreateTime() *VideoMetadatumUpdate {
	vmu.mutation.ClearCreateTime()
	return vmu
}

// SetUpdateTime sets the "update_time" field.
func (vmu *VideoMetadatumUpdate) SetUpdateTime(t time.Time) *VideoMetadatumUpdate {
	vmu.mutation.SetUpdateTime(t)
	return vmu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vmu *VideoMetadatumUpdate) SetNillableUpdateTime(t *time.Time) *VideoMetadatumUpdate {
	if t != nil {
		vmu.SetUpdateTime(*t)
	}
	return vmu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (vmu *VideoMetadatumUpdate) ClearUpdateTime() *VideoMetadatumUpdate {
	vmu.mutation.ClearUpdateTime()
	return vmu
}

// Mutation returns the VideoMetadatumMutation object of the builder.
func (vmu *VideoMetadatumUpdate) Mutation() *VideoMetadatumMutation {
	return vmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vmu *VideoMetadatumUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vmu.sqlSave, vmu.mutation, vmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmu *VideoMetadatumUpdate) SaveX(ctx context.Context) int {
	affected, err := vmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vmu *VideoMetadatumUpdate) Exec(ctx context.Context) error {
	_, err := vmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmu *VideoMetadatumUpdate) ExecX(ctx context.Context) {
	if err := vmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vmu *VideoMetadatumUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(videometadatum.Table, videometadatum.Columns, sqlgraph.NewFieldSpec(videometadatum.FieldID, field.TypeUint64))
	if ps := vmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmu.mutation.VideoID(); ok {
		_spec.SetField(videometadatum.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vmu.mutation.AddedVideoID(); ok {
		_spec.AddField(videometadatum.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vmu.mutation.UserID(); ok {
		_spec.SetField(videometadatum.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vmu.mutation.AddedUserID(); ok {
		_spec.AddField(videometadatum.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vmu.mutation.CoverURL(); ok {
		_spec.SetField(videometadatum.FieldCoverURL, field.TypeString, value)
	}
	if value, ok := vmu.mutation.VideoURL(); ok {
		_spec.SetField(videometadatum.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := vmu.mutation.VideoIntro(); ok {
		_spec.SetField(videometadatum.FieldVideoIntro, field.TypeString, value)
	}
	if vmu.mutation.VideoIntroCleared() {
		_spec.ClearField(videometadatum.FieldVideoIntro, field.TypeString)
	}
	if value, ok := vmu.mutation.VideoType(); ok {
		_spec.SetField(videometadatum.FieldVideoType, field.TypeInt, value)
	}
	if value, ok := vmu.mutation.AddedVideoType(); ok {
		_spec.AddField(videometadatum.FieldVideoType, field.TypeInt, value)
	}
	if value, ok := vmu.mutation.PublishAddress(); ok {
		_spec.SetField(videometadatum.FieldPublishAddress, field.TypeInt32, value)
	}
	if value, ok := vmu.mutation.AddedPublishAddress(); ok {
		_spec.AddField(videometadatum.FieldPublishAddress, field.TypeInt32, value)
	}
	if value, ok := vmu.mutation.CreateTime(); ok {
		_spec.SetField(videometadatum.FieldCreateTime, field.TypeTime, value)
	}
	if vmu.mutation.CreateTimeCleared() {
		_spec.ClearField(videometadatum.FieldCreateTime, field.TypeTime)
	}
	if value, ok := vmu.mutation.UpdateTime(); ok {
		_spec.SetField(videometadatum.FieldUpdateTime, field.TypeTime, value)
	}
	if vmu.mutation.UpdateTimeCleared() {
		_spec.ClearField(videometadatum.FieldUpdateTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videometadatum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vmu.mutation.done = true
	return n, nil
}

// VideoMetadatumUpdateOne is the builder for updating a single VideoMetadatum entity.
type VideoMetadatumUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VideoMetadatumMutation
}

// SetVideoID sets the "video_id" field.
func (vmuo *VideoMetadatumUpdateOne) SetVideoID(i int) *VideoMetadatumUpdateOne {
	vmuo.mutation.ResetVideoID()
	vmuo.mutation.SetVideoID(i)
	return vmuo
}

// AddVideoID adds i to the "video_id" field.
func (vmuo *VideoMetadatumUpdateOne) AddVideoID(i int) *VideoMetadatumUpdateOne {
	vmuo.mutation.AddVideoID(i)
	return vmuo
}

// SetUserID sets the "user_id" field.
func (vmuo *VideoMetadatumUpdateOne) SetUserID(i int) *VideoMetadatumUpdateOne {
	vmuo.mutation.ResetUserID()
	vmuo.mutation.SetUserID(i)
	return vmuo
}

// AddUserID adds i to the "user_id" field.
func (vmuo *VideoMetadatumUpdateOne) AddUserID(i int) *VideoMetadatumUpdateOne {
	vmuo.mutation.AddUserID(i)
	return vmuo
}

// SetCoverURL sets the "cover_url" field.
func (vmuo *VideoMetadatumUpdateOne) SetCoverURL(s string) *VideoMetadatumUpdateOne {
	vmuo.mutation.SetCoverURL(s)
	return vmuo
}

// SetVideoURL sets the "video_url" field.
func (vmuo *VideoMetadatumUpdateOne) SetVideoURL(s string) *VideoMetadatumUpdateOne {
	vmuo.mutation.SetVideoURL(s)
	return vmuo
}

// SetVideoIntro sets the "video_intro" field.
func (vmuo *VideoMetadatumUpdateOne) SetVideoIntro(s string) *VideoMetadatumUpdateOne {
	vmuo.mutation.SetVideoIntro(s)
	return vmuo
}

// SetNillableVideoIntro sets the "video_intro" field if the given value is not nil.
func (vmuo *VideoMetadatumUpdateOne) SetNillableVideoIntro(s *string) *VideoMetadatumUpdateOne {
	if s != nil {
		vmuo.SetVideoIntro(*s)
	}
	return vmuo
}

// ClearVideoIntro clears the value of the "video_intro" field.
func (vmuo *VideoMetadatumUpdateOne) ClearVideoIntro() *VideoMetadatumUpdateOne {
	vmuo.mutation.ClearVideoIntro()
	return vmuo
}

// SetVideoType sets the "video_type" field.
func (vmuo *VideoMetadatumUpdateOne) SetVideoType(i int) *VideoMetadatumUpdateOne {
	vmuo.mutation.ResetVideoType()
	vmuo.mutation.SetVideoType(i)
	return vmuo
}

// AddVideoType adds i to the "video_type" field.
func (vmuo *VideoMetadatumUpdateOne) AddVideoType(i int) *VideoMetadatumUpdateOne {
	vmuo.mutation.AddVideoType(i)
	return vmuo
}

// SetPublishAddress sets the "publish_address" field.
func (vmuo *VideoMetadatumUpdateOne) SetPublishAddress(i int32) *VideoMetadatumUpdateOne {
	vmuo.mutation.ResetPublishAddress()
	vmuo.mutation.SetPublishAddress(i)
	return vmuo
}

// AddPublishAddress adds i to the "publish_address" field.
func (vmuo *VideoMetadatumUpdateOne) AddPublishAddress(i int32) *VideoMetadatumUpdateOne {
	vmuo.mutation.AddPublishAddress(i)
	return vmuo
}

// SetCreateTime sets the "create_time" field.
func (vmuo *VideoMetadatumUpdateOne) SetCreateTime(t time.Time) *VideoMetadatumUpdateOne {
	vmuo.mutation.SetCreateTime(t)
	return vmuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (vmuo *VideoMetadatumUpdateOne) SetNillableCreateTime(t *time.Time) *VideoMetadatumUpdateOne {
	if t != nil {
		vmuo.SetCreateTime(*t)
	}
	return vmuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (vmuo *VideoMetadatumUpdateOne) ClearCreateTime() *VideoMetadatumUpdateOne {
	vmuo.mutation.ClearCreateTime()
	return vmuo
}

// SetUpdateTime sets the "update_time" field.
func (vmuo *VideoMetadatumUpdateOne) SetUpdateTime(t time.Time) *VideoMetadatumUpdateOne {
	vmuo.mutation.SetUpdateTime(t)
	return vmuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (vmuo *VideoMetadatumUpdateOne) SetNillableUpdateTime(t *time.Time) *VideoMetadatumUpdateOne {
	if t != nil {
		vmuo.SetUpdateTime(*t)
	}
	return vmuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (vmuo *VideoMetadatumUpdateOne) ClearUpdateTime() *VideoMetadatumUpdateOne {
	vmuo.mutation.ClearUpdateTime()
	return vmuo
}

// Mutation returns the VideoMetadatumMutation object of the builder.
func (vmuo *VideoMetadatumUpdateOne) Mutation() *VideoMetadatumMutation {
	return vmuo.mutation
}

// Where appends a list predicates to the VideoMetadatumUpdate builder.
func (vmuo *VideoMetadatumUpdateOne) Where(ps ...predicate.VideoMetadatum) *VideoMetadatumUpdateOne {
	vmuo.mutation.Where(ps...)
	return vmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vmuo *VideoMetadatumUpdateOne) Select(field string, fields ...string) *VideoMetadatumUpdateOne {
	vmuo.fields = append([]string{field}, fields...)
	return vmuo
}

// Save executes the query and returns the updated VideoMetadatum entity.
func (vmuo *VideoMetadatumUpdateOne) Save(ctx context.Context) (*VideoMetadatum, error) {
	return withHooks(ctx, vmuo.sqlSave, vmuo.mutation, vmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vmuo *VideoMetadatumUpdateOne) SaveX(ctx context.Context) *VideoMetadatum {
	node, err := vmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vmuo *VideoMetadatumUpdateOne) Exec(ctx context.Context) error {
	_, err := vmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vmuo *VideoMetadatumUpdateOne) ExecX(ctx context.Context) {
	if err := vmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vmuo *VideoMetadatumUpdateOne) sqlSave(ctx context.Context) (_node *VideoMetadatum, err error) {
	_spec := sqlgraph.NewUpdateSpec(videometadatum.Table, videometadatum.Columns, sqlgraph.NewFieldSpec(videometadatum.FieldID, field.TypeUint64))
	id, ok := vmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VideoMetadatum.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, videometadatum.FieldID)
		for _, f := range fields {
			if !videometadatum.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != videometadatum.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vmuo.mutation.VideoID(); ok {
		_spec.SetField(videometadatum.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vmuo.mutation.AddedVideoID(); ok {
		_spec.AddField(videometadatum.FieldVideoID, field.TypeInt, value)
	}
	if value, ok := vmuo.mutation.UserID(); ok {
		_spec.SetField(videometadatum.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vmuo.mutation.AddedUserID(); ok {
		_spec.AddField(videometadatum.FieldUserID, field.TypeInt, value)
	}
	if value, ok := vmuo.mutation.CoverURL(); ok {
		_spec.SetField(videometadatum.FieldCoverURL, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.VideoURL(); ok {
		_spec.SetField(videometadatum.FieldVideoURL, field.TypeString, value)
	}
	if value, ok := vmuo.mutation.VideoIntro(); ok {
		_spec.SetField(videometadatum.FieldVideoIntro, field.TypeString, value)
	}
	if vmuo.mutation.VideoIntroCleared() {
		_spec.ClearField(videometadatum.FieldVideoIntro, field.TypeString)
	}
	if value, ok := vmuo.mutation.VideoType(); ok {
		_spec.SetField(videometadatum.FieldVideoType, field.TypeInt, value)
	}
	if value, ok := vmuo.mutation.AddedVideoType(); ok {
		_spec.AddField(videometadatum.FieldVideoType, field.TypeInt, value)
	}
	if value, ok := vmuo.mutation.PublishAddress(); ok {
		_spec.SetField(videometadatum.FieldPublishAddress, field.TypeInt32, value)
	}
	if value, ok := vmuo.mutation.AddedPublishAddress(); ok {
		_spec.AddField(videometadatum.FieldPublishAddress, field.TypeInt32, value)
	}
	if value, ok := vmuo.mutation.CreateTime(); ok {
		_spec.SetField(videometadatum.FieldCreateTime, field.TypeTime, value)
	}
	if vmuo.mutation.CreateTimeCleared() {
		_spec.ClearField(videometadatum.FieldCreateTime, field.TypeTime)
	}
	if value, ok := vmuo.mutation.UpdateTime(); ok {
		_spec.SetField(videometadatum.FieldUpdateTime, field.TypeTime, value)
	}
	if vmuo.mutation.UpdateTimeCleared() {
		_spec.ClearField(videometadatum.FieldUpdateTime, field.TypeTime)
	}
	_node = &VideoMetadatum{config: vmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{videometadatum.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vmuo.mutation.done = true
	return _node, nil
}
